{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ASIR","text":""},{"location":"#alejandro-albaladejo-gago","title":"Alejandro Albaladejo Gago","text":""},{"location":"BBDD/instalaciones/","title":"INSTALACIONES DE CLIENTES Y SERVIDORES","text":""},{"location":"BBDD/instalaciones/#individual","title":"Individual","text":"<p>\"En esta p\u00e1gina \u00fanicamente encontrar\u00e1s la parte individual del alumno 3 y la parte grupal.\" - Alejandro  </p>"},{"location":"BBDD/instalaciones/#instalacion-de-un-servidor-oracle-19c-sobre-debian-otro-postgres-otro-mysql-y-otro-de-mongodb-y-configuracion-para-permitir-el-acceso-remoto-desde-la-red-local","title":"Instalaci\u00f3n de un servidor Oracle 19c sobre Debian, otro Postgres, otro MySQL y otro de MongoDB y configuraci\u00f3n para permitir el acceso remoto desde la red local.","text":""},{"location":"BBDD/instalaciones/#oracle","title":"Oracle","text":"<p>Para la instalaci\u00f3n de Oracle-21c Enterprise Edition en Debian 12 vamos a empezar instalando los paquetes necesarios.</p> <p><code>sudo apt install libaio1 unixodbc</code></p> <p>libaio1: es una biblioteca de E/S del kernel de Linux que es requerida por aplicaciones como motores de bases de datos y administradores de m\u00e1quinas virtuales.</p> <p>Unixodbc: Es un est\u00e1ndar de conectividad de base de datos abierta para sistemas de tipo UNIX</p> <p>A continuaci\u00f3n tenemos que establecer los par\u00e1metros del k\u00e9rnel. La herramienta sysctl administra la confguraci\u00f3n del n\u00facleo a trav\u00e9s del pseudosistema de archivos <code>/proc</code>. Adem\u00e1s, la configuraci\u00f3n de sysctl garantiza que <code>/etc/sysctl.conf</code> y todos los scripts en <code>/etc/sysctl.d</code> se analicen al iniciar, lo que permite aplicar opciones permanentes entre reinicios.</p> <p>En nuestro caso es posible que sea necesario modificar diferentes par\u00e1metros del k\u00e9rnel, por lo que creamos el archivo <code>60-oracle.conf</code> en el directorio con los par\u00e1metros que necesitamos. Lo hacemos con <code>nano /etc/sysctl.conf</code> y a\u00f1adimos lo siguiente:</p> <pre><code>ale@base-de-datos:~$ sudo cat /etc/sysctl.d/60-oracle.conf\n#Oracle Kernel parameters\nfs.file-max=6815744\nnet.ipv4.ip_local_port_range=9000 65000\nkernel.shmmax=536870912\nkernel.sem=250 32000 100 128\n</code></pre> <p>fs.file-max=6815744: Es el m\u00e1ximo de descriptores de archivos abiertos simult\u00e1neamente para un proceso determinado.</p> <p>net.ipv4.ip_local_port_range=9000 65000: Son los puertos asignados din\u00e1micamente en el lado del cliente de las conexiones TCP.</p> <p>kernel.shmmax=536870912: Tama\u00f1o m\u00e1ximo en bytes de un \u00fanico segmento de memoria compartida de espacio de direcci\u00f3n virtual.</p> <p>kernel.sem=250 32000 100 128: Son los valores m\u00e1ximos de los recuentos de sem\u00e1foros de SystemV.</p> <p>Con esto nos aseguramos que cada proceso pueda abrir una gran cantidad de descriptores de archivos, que los puertos esperados est\u00e9n disponibles y que se pueda compartir suficiente memoria entre procesos.</p> <p>Es importante destacar que estos cambios no entrar\u00e1n en vigor hasta que reiniciemos el sistema. Una manera que podemos aplicarlos sin reiniciar es el servicio procps.</p> <p><code>ale@base-de-datos:~$ sudo systemctl start procs</code></p> <p>Este comando simplemente invoca el script /etc/init.d/procps y aplica la configuraci\u00f3n.</p> <p>Siguiente paso es crear el fichero /sbin/chkconfig.</p> <p>La configuraci\u00f3n de Oracle Database EE espera el archivo, que mantiene la jerarqu\u00eda del servicio en algunos sistemas basados en RPM</p> <pre><code>ale@base-de-datos:~$ sudo cat /sbin/chkconfig\n!/bin/bash\n#Oracle 21 EE installer chkconfig hack\nfile=/etc/init.d/oracle-ee-21c\nif [[ ! `tail -n1 $file | grep INIT` ]]; then\necho &gt;&gt; $file\necho '### BEGIN INIT INFO' &gt;&gt; $file\necho '# Provides: OracleEE' &gt;&gt; $file\necho '# Required-Start: $remote_fs $syslog' &gt;&gt; $file\necho '# Required-Stop: $remote_fs $syslog' &gt;&gt; $file\necho '# Default-Start: 2 3 4 5' &gt;&gt; $file\necho '# Default-Stop: 0 1 6' &gt;&gt; $file\necho '# Short-Description: Oracle Enterprise Edition' &gt;&gt; $file\necho '### END INIT INFO' &gt;&gt; $file\nfi\nupdate-rc.d oracle-ee-21c defaults 80 01\n</code></pre> <p>Completamos /sbin/chkconfig con un script que crea el archivo de inicio /etc/init.d/oracle-ee-21c y garantiza que ejecute nuestro servicio de arranque.</p> <p>Ahora al igual que muchos sistemas de base de datos, Oracle Database optimiza su funci\u00f3n con memoria compartida.</p> <p>Para ello establecemos el punto de montaje /dev/shm mediante un script.</p> <pre><code>ale@base-de-datos:~$ cat /etc/rc2.d/S01shm_load\n!/bin/sh\ncase \"$1\" in\n  start)\n    mkdir /var/lock/subsys 2&gt;/dev/null\n    touch /var/lock/subsys/listener\n    rm /dev/shm 2&gt;/dev/null\n    mkdir /dev/shm 2&gt;/dev/null\n    ;;\n  *)\n    echo error\n    exit 1\n    ;;\nesac\n</code></pre> <p>Este script crea el directorio /var/lock/subsys y el archivo /var/lock/subsys/listener dentro de \u00e9l. Despu\u00e9s vuelve a crear el directorio /dev/shm. Tenemos que hacer que el script sea ejecutable: <code>ale@base-de-datos:~$ sudo chmod 755 /etc/rc2.d/S01shm_load</code></p> <p>Ahora cada arranque del sistema deber\u00eda restablecer el espacio de memoria compartida requerido. Ahora reiniciamos la m\u00e1quina para aplicar todas las configuraciones.</p> <p><code>ale@base-de-datos:~$ sudo reboot</code></p> <p>Ahora creamos un enlace simb\u00f3lico, que normalmente ya est\u00e1n creados porque los crean los scripts del paquete de Oracle Database. </p> <pre><code>ale@base-de-datos:~$ sudo ln --symbolic /usr/bin/awk /bin/awk\nale@base-de-datos:~$ sudo mkdir /var/lock/subsys\nale@base-de-datos:~$ sudo touch /var/lock/subsys/listener\nale@base-de-datos:~$ sudo sysctl fs.file-max\n</code></pre> <p>Antes de instalarlo, debemos tener sus archivos de instalaci\u00f3n desde la p\u00e1gina oficial de descargas.</p> <p>A continuaci\u00f3n tenemos que convertir el paquete que nos hemos descargado, .rpm, a un paquete .deb. Para ello lo haremos con alien.</p> <p>Instalamos alien:</p> <p><code>ale@base-de-datos:~$ sudo apt install alien</code></p> <p><code>ale@base-de-datos:~$ sudo alien --scripts --to-deb oracle-database-ee-21c-1.0-1.ol8.x86_64.rpm</code></p> <p>Aqu\u00ed con --to-deb lo ponemos para generar el paquete Debian .deb.</p> <p>Este paso seguramente tarde bastante tiempo (a mi me tard\u00f3 aproximadamente entre 30-45 minutos)</p> <p>Una vez terminado tendremos los paquetes rpm y deb.</p> <p>Ahora vamos con la instalaci\u00f3n del archivo deb. Para instalar el paquete .deb lo haremoos con dpkg --install.</p> <p>Una vez instalado, vamos a configurarlo. Ejecutamos </p> <p><code>ale@base-de-datos:~$ sudo /etc/init.d/oracledb_ORCLCDB-21c configure</code></p> <p>Aqu\u00ed tambi\u00e9n puede tardar un poco.</p> <p>Una vez terminada la instalaci\u00f3n, vamos a configurar las variables de entorno dentro de nuestro .bashrc</p> <pre><code>cat $HOME/.bashrc\n[...]\nexport ORACLE_HOME=/opt/oracle/product/21c/dbhome_1\nexport ORACLE_SID=ORCLCDB\nexport ORACLE_BASE=/opt/oracle\nexport LD_LIBRARY_PATH=$ORACLE_HOME/lib:$LD_LIBRARY_PATH\nexport PATH=$ORACLE_HOME/bin:$PATH\nexport NLS_LANG=AMERICAN.US7ASCII\n</code></pre> <p>Lo cargamos con <code>source .bashrc</code> y entramos a la base de datos con el comando <code>sqlplus / as sysdba</code></p> <p>Ah\u00ed ya podremos configurar los usuarios que queramos.</p> <p></p> <p>Ahora que ya hemos configurado el acceso localmente vamos a configurar el fichero listener.ora y para que podamos acceder remotamente a Oracle. En el nombre del HOST, tambi\u00e9n podr\u00edamos poner el nombre de host que tenemos en /etc/hosts para nuestro servidor</p> <p></p> <p>Ya podemos acceder desde el cliente</p> <p></p> <p>Es importante configurar una direcci\u00f3n IP est\u00e1tica en nuestro servidor, para que \u00e9ste no est\u00e9 cambiando constantemente de IP. Si queremos acceder sin ver la direcci\u00f3n IP del servidor a\u00f1adimos al /etc/host la direcci\u00f3n IP del servidor y un nombre con el que vayamos a acceder:</p> <p></p>"},{"location":"BBDD/instalaciones/#postgresql","title":"PostgreSQL","text":"<p>Para la instalaci\u00f3n de PostgreSQL lo haremos en el servidor con el comando <code>sudo apt install postgresql -y</code></p> <p>Ahora entramos con el usuario postgres y le cambiamos la contrase\u00f1a. Tambi\u00e9n creamos un nuevo usuario.</p> <p><code>ale@base-de-datos:~$ sudo -u postgres psql</code></p> <pre><code>postgres=# ALTER USER postgres with password 'contrase\u00f1a'\nALTER ROLE\n\npostgres=# CREATE USER alejandro with password 'contrase\u00f1a'\nCREATE ROLE\n</code></pre> <p>Intentamos entrar con el usuario a la base de datos que hemos creado de prueba y nos dar\u00e1 un fallo:</p> <pre><code>ale@base-de-datos:~$ psql -U alejandro -d prueba\npsql: error: fall\u00f3 la conexi\u00f3n al servidor en el socket &lt;&lt;/var/run/postgresql/.s.PGSQL.5432&gt;&gt;: FATAL: la autentificaci\u00f3n Peer fall\u00f3 para el usuario alejandro\n</code></pre> <p>Si nos da este error tendremos que modificar el fichero /etc/postgresql/15/main/pg_hba.conf en el que vamos a modificar todas las l\u00edneas que tienen peer por md5.</p> <p>A continuaci\u00f3n reiniciamos el servicio. Y ya podremos entrar al servidor. <code>ale@base-de-datos:~$ sudo systemctl restart postgresql</code></p> <p>Con el comando <code>sudo apt install postgresql-client</code> instalamos el cliente en otra m\u00e1quina.</p> <p>Para configurar el acceso remoto al servidor modificamos el fichero /etc/postgresql/15/main/pg_hba.conf donde a\u00f1adimos la l\u00ednea siguiente: <code>host   all         all         192.168.1.0/24      md5</code></p> <p>A continuaci\u00f3n modificamos el fichero /etc/postgresql/15/main/postgresql.conf donde buscamos la l\u00ednea de listen_addresses que est\u00e1 comentada y le a\u00f1adiremos la direcci\u00f3n IP del servidor. <code>listen_addresses = '192.168.1.147'</code></p> <p>Por \u00faltimo reiniciamos el servicio. </p>"},{"location":"BBDD/instalaciones/#mariadbmysql","title":"MariaDB/MySQL","text":"<p>Para la parte del servidor, vamos a instalar el paquete de mariadb-server</p> <p><code>ale@base-de-datos:~$ sudo apt install mariadb-server</code></p> <p>Luego comprobamos que est\u00e9 iniciado el servicio. Si no lo est\u00e1 lo hacemos con <code>sudo systemctl start mariadb</code>.</p> <p>Una vez tengamos el servicio activo, vamos a realizar la configuraci\u00f3n, con el comando <code>mysql_secure_installation</code> en el que vamos dejar las opciones por defecto.</p> <p>Para instalar el cliente lo haremos con el comando <code>sudo apt install mariadb-client</code>.</p> <p>Pasamos a la configuraci\u00f3n del servidor para poder acceder remotamente al servidor. Para ello modificamos el fichero /etc/mysql/mariadb.conf.d/50-server.cnf</p> <p>En el fichero, buscaremos la opci\u00f3n de bind-address y modificaremos la que tenemos por la 0.0.0.0</p> <p>Ahora en el servidor vamos a entrar como root y vamos a crear una base de datos nueva (pruebas) y tambi\u00e9n crearemos un nuevo usuario al que le vamos a dar algunos permisos para poder acceder a la base de datos y hacer algunas pruebas.</p> <pre><code>ale@base-de-datos:~$ msyql -u root -p\nEnter password: \n[...]\nMariaDB [(none)]&gt;\n</code></pre> <p>Para que el usuario que creemos se pueda conectar remotamente, debemos poner en lugar de localhost, el s\u00edmbolo %</p> <pre><code>MariaDB [(none)]&gt; CREATE DATABASE pruebas;\nMariaDB [(none)]&gt; CREATE USER 'ale'@'%' IDENTIFIED BY 'contrase\u00f1a';\nMariaDB [(none)]&gt; GRANT SELECT, INSERT, CREATE ON pruebas.* TO 'ale'@'%';\n</code></pre> <p>Ahora para acceder remotamente, a\u00f1adiremos al /etc/hosts la direcci\u00f3n IP del servidor y el nombre con el que vamos a acceder de manera que no vamos a tener que acceder con la IP a la vista:</p> <pre><code>ale@vodkita:$ mysql -u ale -p -h bbdd\nEnter password:\n[...]\nMariaDB [(none)]&gt; use pruebas\nDatabase changed\nMariaDB [pruebas]&gt; CREATE TABLE usuarios (ID NUMERIC(3) PRIMARY KEY, nombre VARCHAR(20));\nMariaDB [pruebas]&gt; INSERT INTO usuarios VALUES (1,'Alejandro');\nMariaDB [pruebas]&gt; INSERT INTO usuarios VALUES (2,'Pineda');\nMariaDB [pruebas]&gt; SELECT * FROM usuarios;\n+----+-----------+\n| ID | nombre    |\n+----+-----------+\n|  1 | Alejandro |\n|  2 | Pineda    |\n+----+-----------+\n</code></pre>"},{"location":"BBDD/instalaciones/#mongodb","title":"MongoDB","text":"<p>Para la instalaci\u00f3n de MongoDB vamos a instalar gnupg y curl <code>ale@base-de-datos:~$ sudo apt install gnupg curl</code></p> <p>Luego vamos a importar la clave GPG p\u00fablica de MongoDB. <code>ale@base-de-datos:~$ curl -fsSL https://pgp.mongodb.com/server-7.0.asc | sudo gpg --dearmor -o /etc/apt(trusted.gpg.d/mongodb-server-7.0.gpg)</code></p> <p>A\u00f1adimos un nuevo repositorio a la lista de fuentes de Debian.</p> <p><code>ale@base-de-datos:~$ echo \"deb [ arch=amd64,arm64 ] https://repo.mongo.org/apt/ubuntu jammy/mongodb-org/7.0 multiverse\" | sudo tee /etc/apt/sourcer.list.d/mongodb-org-7.0.list</code></p> <p>Por \u00faltimo actualizamos y descargamos el mongoDB</p> <p><code>ale@base-de-datos:~$ sudo apt update &amp;&amp; sudo apt install -y mongodb-org</code></p> <p>Comprobamos que el servicio est\u00e1 activo con <code>sudo systemctl status mongod.service</code>. Si no est\u00e1 activo lo iniciamos con <code>sudo systemctl start mongod.service</code></p> <p>Comprobamos que podemos entrar</p> <pre><code>ale@base-de-datos:~$ mongosh\n[...]\n\ntest&gt;\n</code></pre> <p>Para el acceso remoto modificamos el fichero /etc/mongod.conf y buscamos el apartado de network interfaces donde lo modificamos y ponemos 0.0.0.0, tambi\u00e9n activaremos el control de acceso, para que los usuarios tengan que autenticarse con usuario y contrase\u00f1a.</p> <p>En el fichero:</p> <pre><code>[...]\n# network interfaces\nnet:\n    port: 27017\n    bindIp: 0.0.0.0\n[...]\nsecurity:\n    authorization: enabled\n</code></pre> <p>Reiniciamos el servicio</p> <p><code>ale@base-de-datos:~$ sudo systemctl restart mongod.service</code></p> <p>Ahora crearemos un usuario administrador en admin y accedemos con \u00e9l a la base de datos.</p> <pre><code>ale@base-de-datos:~$ mongosh\n[...]\n\ntest&gt; use admin\nadmin&gt; db.createUser({user: \"root\", pwd: \"contrase\u00f1a\", roles: [\"root\"]})\n</code></pre> <pre><code>ale@base-de-datos:~$ mongosh -u root -p contrase\u00f1a\n</code></pre>"},{"location":"BBDD/instalaciones/#instalacion-y-prueba-del-funcionamiento-basico-de-neo4j","title":"Instalaci\u00f3n y prueba del funcionamiento b\u00e1sico de Neo4J.","text":"<p>Teor\u00eda de grafos:</p> <p>Un grafo es una colecci\u00f3n de objetos en la que cada objeto tiene una serie de relaciones con otrosobjetos.</p> <p>Neo4j es una base de datos que los datos est\u00e1n guardados como un grafo. Se puede construir el modelo conforme se importan los datos.</p> <p>Nodos: Representan entidades u objetos. Pueden tener etiquetas que indican su tipo (Ej Persona, producto).</p> <p>Relaciones: Conectan los nodos. Tienen una direcci\u00f3n (en consultas pueden ser recorridas en cualquier direcci\u00f3n). Pueden tener tipos que describen la naturaleza de la relaci\u00f3n (Ej Amigo_de, Compr\u00f3).</p> <p>Propiedades: Tanto nodos como relaciones pueden tener propiedades, que son pares clave-valor que almacenan informaci\u00f3n adicional. Por ejemplo un nodo, persona, puede tener propiedades como nombre y edad.</p> <p>Etiquetas: Categor\u00edas que se asignan a los nodos para clasificarlos y facilitar las consultas.</p> <p></p> <p>Para su instalaci\u00f3n ejecutamos el comando</p> <p><code>sudo wget -O /usr/share/keyrings/neo4j-archivekeyring.gpg https://debian.neo4j.com neotechnology.gpg.key</code> </p> <p>que nos agregar\u00e1 la clave GPG del repositorio de Neo4j</p> <p>Despu\u00e9s de agregar la clave, a\u00f1adimos el repositorio:</p> <p><code>deb [signed-by=/usr/share/keyrings/neo4j-archive-keyring.gpg] https://debian.neo4j.com stable main</code></p> <p>Actualizamos e instalamos neo4j</p> <p><code>sudo apt update &amp;&amp; sudo apt install neo4j</code></p> <p>Una vez instalado, iniciamos el servicio.</p> <p><code>sudo systemctl start neo4j.service</code></p> <p>Para el acceso remoto modificamos el fichero /etc/neo4j/neo4j.conf en el que cambiaremos el valor de la l\u00ednea server.default_listen_address y le a\u00f1adimos 0.0.0.0</p> <p>Una vez hecho esto reiniciamos el servicio y desde el navegador de nuestra m\u00e1quina local, podemos acceder con la direcci\u00f3n de la m\u00e1quina virtual y el puerto 7474</p> <p></p> <p>Para acceder por primera vez nos pide un usuario y contrase\u00f1a que ser\u00e1 neo4j para los dos, ya que viene por defecto. Una vez dentro podemos cambiarla con la contrase\u00f1a que queramos nosotros:</p> <p></p> <p></p> <p>Una vez ya dentro, vamos a empezar con los primeros pasos b\u00e1sicos</p> <p>Lenguaje Cypher: Es el lenguaje propio de Neo4j. La sintaxis usa un estilo ascii-art para hacer los comandos intuitivos.</p> <p>Los nodos se representan con c\u00edrculos y las relaciones con flechas. Su representaci\u00f3n en ascii-art consiste en poner nodos entre par\u00e9ntesis () y relaciones como flechas etiquetadas por corchetes []:</p> <p>(nodo)-[:RELACI\u00d3N]-&gt; (nodo)</p> <p>Las propiedades de los nodos o las relaciones se indican con una estructura parecida a un diccionario:</p> <p><code>(nodo {name:'Alejandro', surname:'Albaladejo'})</code></p> <p>Las etiquetas se indican despu\u00e9s de definir la variable: <code>(nodo:Person {name:'Alejandro', surname:'Albaladejo'})</code></p> <p>Vamos a empezar creando un nodo:</p> <pre><code>CREATE (Al:Person {name:'Alejandro', surname'Albaladejo'})\nCREATE (Ja:Person {name: 'Juan Antonio', surname: 'Pineda'});\nCREATE (Ki:Person {name: 'Kiko', surname: 'Doblado'});\nCREATE (Jk:Person {name: 'Juan Carlos', surname: 'Mart\u00edn'});\n</code></pre> <p></p> <p>Vamos a crear Relaciones que Alejandro conoce a Juan Antonio, Juan Carlos y a Kiko y que Kiko tambi\u00e9n conoce a Juan Antonio. Juan Carlos solo conoce a Alejandro.</p> <pre><code>MATCH (Al:Person {name: 'Alejandro'}), (Ja:Person {name: 'Juan Antonio'})\nCREATE (Al)-[:KNOWS]-&gt;(Ja);\n\nMATCH (Al:Person {name: 'Alejandro'}), (Ki:Person {name: 'Kiko'})\nCREATE (Al)-[:KNOWS]-&gt;(Ki);\n\nMATCH (Ja:Person {name: 'Juan Antonio'}), (Ki:Person {name: 'Kiko'})\nCREATE (Ja)-[:KNOWS]-&gt;(Ki);\n\nMATCH (Jk:Person{name:'Juan Carlos'}),(Al:Person{name:'Alejandro'})\nCREATE (Jk)-[:KNOWS]-&gt;(Al);\n\n</code></pre> <p>Para explicarlo cojo la primera relaci\u00f3n creada.</p> <p>MATCH busca dos nodos en la base de datos que cumplan con las condiciones especificados. En este caso un nodo de tipo Person con los nombres de Alejandro y de Juan Antonio. Una vez que se encuentran los dos nodos, CREATE, crea una relaci\u00f3n entre ellos que se denomina KNOWS, es decir que Alejandro conoce a Juan Antonio.</p> <p>Ahora vamos a hacer alguna Consulta para ver todos los nodos y sus relaciones.</p> <p>Para empezar buscamos todos los nodos de tipo Person: <code>MATCH (p:Person) RETURN p;</code></p> <p>La respuesta a la consulta se puede ver de distintas maneras.</p> <ol> <li>GRAFOS</li> </ol> <p></p> <ol> <li>JSON</li> </ol> <p></p> <ol> <li>Texto en una tabla</li> </ol> <p></p> <p>Podemos contar tambi\u00e9n por ejemplo cu\u00e1ntas personas hay en la base de datos:</p> <p><code>MATCH (p:Person) RETURN count(p) AS Num_Personas</code></p> <p></p> <p>Buscar informaci\u00f3n sobre Kiko:</p> <p><code>MATCH (Ki:Person {name:'Kiko'}) RETURN Ki</code></p> <p></p> <p>Encontrar relaciones de a quien conoce Juan Antonio.</p> <p></p>"},{"location":"BBDD/instalaciones/#realizacion-de-una-aplicacion-web-en-cualquier-lenguaje-que-conecte-con-el-servidor-oracle-tras-autenticarse-muestre-las-tablas-accesibles-para-ese-usuario-y-permita-acceder-a-los-registros-de-alguna-de-ellas","title":"Realizaci\u00f3n de una aplicaci\u00f3n web en cualquier lenguaje que conecte con el servidor ORACLE tras autenticarse, muestre las tablas accesibles para ese usuario y permita acceder a los registros de alguna de ellas.","text":"<p>Vamos a mostrar el funcionamiento de la p\u00e1gina web.</p> <p>El c\u00f3digo de esta p\u00e1gina se puede ver en: C\u00f3digo web</p> <p>Para comenzar iniciamos sesi\u00f3n con un usuario incorrecto</p> <p></p> <p>Vemos que nos da error de usuario o contrase\u00f1a e iniciamos con un usuario correcto.</p> <p></p> <p>Nos lleva al apartado de tablas donde tenemos una lista con las tablas que hemos creado nosotros y sobre las que tenemos el permiso SELECT para hacer consultas sobre tablas de otros usuarios.</p> <p></p> <p>Si iniciamos sesi\u00f3n con otro usuario que no tiene permisos sobre la tabla de usuarios por ejemplo:</p> <p></p> <p>Vemos que solo puede ver una tabla sobre la que tiene permisos.</p> <p></p> <p>Si accedemos a las tabla de MODULOS veremos su contenido.</p> <p></p> <p>Si accedemos a la tabla del otro usuario, USUARIOS, veremos tambi\u00e9n el contenido de la tabla.</p> <p></p>"},{"location":"BBDD/instalaciones/#grupal","title":"Grupal","text":""},{"location":"BBDD/instalaciones/#instalacion-de-sql-developer-en-win-con-cliente-remoto-de-oracle","title":"Instalaci\u00f3n de SQL Developer en Win con cliente remoto de Oracle","text":"<p>Para poder descargar SQL Developer nos dirigimos a la p\u00e1gina oficial de este y nos descargamos la versi\u00f3n de windows 64-bit que es la que vamos a necesitar.</p> <p>Y ahora para proceder con la instalaci\u00f3n nos dirigimos a la carpeta sqldeveloper que la hemos descomprimido en el Escritorio. Pulsamos sobre sqldeveloper para comenzar la instalaci\u00f3n</p> <p></p> <p>Ahora vamos a a\u00f1adir el usuario de la base de datos albaladejo a mi cliente. Para ello, crearemos una nueva conexi\u00f3n y proporcionaremos los datos de identificaci\u00f3n, como el usuario, la contrase\u00f1a, la IP, etc. Para finalizar, le daremos a Conectar:</p> <p></p> <p>Ahora vamos a realizar un select para ver si funciona correctamente el cliente sql Developer para ello nos iremos a preview y pondremos la consulta que queramos realizar en mi caso un simple select:</p> <p></p> <p>Ahora realizaremos un insert a la tabla usuario a\u00f1adiendo el usuario javi, esto lo hacemos para comprobar que tenemos tambi\u00e9n permisos para insertar datos:</p> <p></p> <p>Ahora volveremos a realizar un select de la misma tabla y veremos que se ha a\u00f1adido el usuario javi:</p> <p></p> <p>Para ver que realmente se funciona este cliente de oracle nos iremos al servidor oracle de Albaladejo y comprobaremos un select que los datos realmente se han creado:</p> <p></p>"},{"location":"BBDD/instalaciones/#administracion-web-para-postgres-y-utilidad-desde-cliente-remoto","title":"Administraci\u00f3n web para Postgres y utilidad desde cliente remoto","text":"<p>Para esta parte de la practica grupal utilizaremos la herramienta pgAdmin. </p> <p>Es una herramienta de administraci\u00f3n de c\u00f3digo abierto y una plataforma de desarrollo para el servidor de bases de datos PostgreSQL. El pgAdmin viene con versiones Desktop y Server. La versi\u00f3n Desktop puede instalarse en tu m\u00e1quina local, mientras que la versi\u00f3n Server est\u00e1 basada en web y se ejecutar\u00e1 bajo el servidor web. Instalaci\u00f3n de pgAdmin Lo primero que haremos es a\u00f1adir el repositorio pgadmin4.</p> <p><code>sudo echo \"deb [arch=amd64 signed-by=/usr/share/keyrings/pgadmin4.gpg] https://ftp.postgresql.org/pub/pgadmin/pgadmin4/apt/$(lsb_release -cs) pgadmin4 main\"\\ | sudo tee /etc/apt/sources.list.d/pgadmin4.list</code></p> <p>Ahora a\u00f1adiremos las claves GPG del repositorio pgAdmin4.</p> <p><code>curl -fsSL https://www.pgadmin.org/static/packages_pgadmin_org.pub | sudo gpg --dearmor -o /usr/share/keyrings/pgadmin4.gpg</code></p> <p>Actualizaremos los repositorio de deb\u00edan y instalaremos el paquete pgAmind4-web.</p> <p><code>sudo apt update &amp;&amp; sudo apt install pgadmin4-web</code></p> <p>Una vez instalado usaremos el script de pgAdmin4 para configurar el usuario y contrase\u00f1a de administraci\u00f3n del login.</p> <p><code>sudo /usr/pgadmin4/bin/setup-web.sh</code></p> <p>En las dos preguntas responderemos y de yes a que queremos activar el modulo wsgi y para reiniciar el servidor web apache2.</p> <p>Buscaremos la ip de la m\u00e1quina instalado pgAdmin4 y la pondremos en el navegador m\u00e1s la /pgadmie4. Si es desde la misma m\u00e1quina con pgadmi4 debes de buscar la direcci\u00f3n 127.0.0.1 e iniciaremos sesi\u00f3n en el login con las credenciales puestas en el script anterior.</p> <p></p> <p></p> <p>Una vez dentro de la web le daremos a agregar un nuevo servidor.</p> <p></p> <p>Seguiremos los pasos de las capturas para a\u00f1adir un servidor.</p> <p></p> <p></p> <p>Una vez a\u00f1adida podemos ver a la izquierda que se nos a\u00f1adir\u00e1 las base de datos del servidor.</p> <p></p> <p>Ahora a\u00f1adiremos una nueva base de datos.</p> <p></p> <p></p> <p></p> <p>Veremos como esta se ha a\u00f1adido.</p> <p></p> <p>Ahora crearemos una nueva tabla aparte de las ya creado porque a utilizado la base de datos kiko como plantilla.</p> <p>Est\u00e1 en la ruta de pgadmin4/Esquemas/Tablas</p> <p></p> <p></p> <p></p> <p>Veremos como la tabla se a\u00f1adi\u00f3.</p> <p></p> <p>Insert a la tabla creada.</p> <p></p> <p></p> <p>Luego debajo nos saldr\u00e1 los atributos de la tabla y le daremos a lo marcado en rojo para a\u00f1adir contenido y en la parte azul guardamos los cambios.</p> <p></p> <p>Ahora nos iremos al cliente, accederemos a la base de datos y verificaremos que la tabla esta con el contenido a\u00f1adido.</p> <p></p> <p></p>"},{"location":"BBDD/instalaciones/#administracion-web-para-mysql-y-utilidad-desde-cliente-remoto","title":"Administraci\u00f3n web para MySQL y utilidad desde cliente remoto","text":"<p>Para comenzar vamos a instalar un servidor web e iniciarlo si no lo tenemos instalado. Vamos a usar apache2 <code>sudo apt install apache2 -y</code></p> <p>El lenguaje de programaci\u00f3n PHP y el entorno de codificaci\u00f3n son esenciales para ejecutar una aplicaci\u00f3n web como phpMyAdmin. Por eso vamos a instalar los paquetes b\u00e1sicos de PHP y los complementos de Apache y MySQL con el siguiente comando: <code>sudo apt -y install php php-cgi php-mysqli php-pear php-mbstring libapache2-mod-php phpcommon php-phpseclib php-mysql</code></p> <p>Lo siguiente ser\u00e1 instalar y configurar MySQL. <code>sudo apt install mariadb-server mariadb-client -y</code></p> <p>Una vez configurado todo para permitir el acceso remoto, lo siguiente es descargarnos phpMyAdmin con: <code>wget -P Downloads https://www.phpmyadmin.net/downloads/phpMyAdmin-latest-alllanguages.tar.gz</code></p> <p>Ahora descargamos el archivo GPG.asc que corresponde a su versi\u00f3n de phpMyAdmin <code>wget https://www.phpmyadmin.net/downloads/phpMyAdmin-latest-all-languages.tar.gz.asc</code></p> <p>Y lo verificamos con <code>gpg --verify phpMyAdmin-latest-all-languages.tar.gz.asc</code></p> <p>Despu\u00e9s de verificar la clave, descomprimimos el archivo:</p> <pre><code>sudo mkdir /var/www/html/phpMyAdmin\nsudo tar xvf phpMyAdmin-latest-all-languages.tar.gz --strip-components=1 -C /var/www/html/phpMyAdmin\n</code></pre> <p>Ahora para evitar el acceso no autorizado y proteger la integridad y confidencialidad de los datos. Creamos un archivo de configuraci\u00f3n determinado <code>sudo cp /var/www/html/phpMyAdmin/config.sample.inc.php /var/www/html/phpMyAdmin/config.inc.php</code></p> <p>Y editamos el archivo donde buscaremos la l\u00ednea cfg['blowfish_secret'] = ''; y a\u00f1adiremos una clave. </p> <p>A continuaci\u00f3n le cambiamos los permisos al archivo y le cambiamos el propietario a www-data</p> <pre><code>sudo chmod 660 /var/www/html/phpMyAdmin/config.inc.php\nsudo chown -R www-data: /var/www/html/phpMyAdmin\nsudo systemctl restart apache2\n</code></pre> <p>Ya podemos entrar en el navegador de nuestro host con la direcci\u00f3n IP de nuestro servidor y la localizaci\u00f3n de phpMyAdmin</p> <p></p> <p>Una vez dentro vamos a explicar un poco el funcionamiento. Vamos a entrar en la base de datos de PHPAdmin</p> <p></p> <p>Ah\u00ed vamos a crear una tabla nueva.</p> <p></p> <p>Cuando le damos a crear se nos abre la configuraci\u00f3n de la tabla:</p> <p></p> <p>Modificamos lo que necesitemos, vemos que podemos ponerle el nombre de las columnas, el tipo de dato que es, la longitud, la primary key, etc.</p> <p>Al pulsar sobre guardar veremos la nueva tabla creada.</p> <p></p> <p>Si nos vamos a la estructura podremos ver y editar si lo necesitamos la tabla.</p> <p></p> <p>Para insertar datos en la tabla, nos vamos a la pesta\u00f1a donde pone Insertar</p> <p></p> <p>Vamos ahora a crear unas tablas para comprobar como se realizan las foreign key de otras tablas.</p> <p>Tabla m\u00f3dulos</p> <p> </p> <p>Tabla notas</p> <p></p> <p>Hasta aqu\u00ed la creaci\u00f3n de las tablas es igual. Para a\u00f1adir las claves for\u00e1neas iremos a la pesta\u00f1a Estructura y ah\u00ed completamos los datos de la siguiente forma, indicando las claves for\u00e1neas. Con los desplegables podremos ayudarnos ya que nos salen las opciones disponibles en cada caso.</p> <p></p> <p>Para insertar datos en la nueva tabla, nuevamente nos vamos a la pesta\u00f1a Insertar donde ah\u00ed volver\u00e1 a haber un desplegable con los posibles datos que podemos a\u00f1adir (son los datos de la otra tabla a la que hace referencia).</p> <p></p> <p>Ingresamos unos cuantos datos y quedar\u00eda as\u00ed:</p> <p></p> <p>Para hacer alguna consulta nos iremos a la parte de la base de datos y vamos a la pesta\u00f1a Generar una consulta. Ah\u00ed podremos indicar que columnas y de que tablas queremos que nos seleccione.</p> <p></p> <p>Vemos que nos muestra los datos ingresados.</p> <p></p>"},{"location":"BBDD/instalaciones/#administracion-web-para-mongodb-y-utilidad-desde-cliente-remoto","title":"Administraci\u00f3n web para MongoDB y utilidad desde cliente remoto","text":"<p>Ahora vamos a proceder con la instalaci\u00f3n de un cliente web mongo en nuestro caso vamos a utilizar mongo comp\u00e1s que es una herramienta que es oficial de mongodb esta la podremos encontrar en este enlace, nosotros vamos a descargar la versi\u00f3n de ubuntu ya que debian est\u00e1 basada en este, copiaremos el enlace para luego descargas la aplicaci\u00f3n:</p> <p>Ahora nos iremos a nuestro cliente y con un wget y el enlace que hemos cogido antes lo pegamos y nos lo descargamos con wget</p> <p>Y con <code>sudo apt install ./mongo-compass-1.44.5_amd64.deb</code> nos descargaremos el paquete</p> <p>Ahora iniciaremos el programa poniendo en la terminal  usando: <code>mongodb-compass</code></p> <p>Y luego nos saldra esta pesta\u00f1a la cu\u00e1l es la que vamos a utilizar para configurar un servidor remoto de mongo en este caso el servidor va hacer de Albaladejo para crear la conexi\u00f3n a ese servidor le tendremos que dar a add new connection:</p> <p></p> <p>Una vez le demos a a\u00f1adir una nueva conexi\u00f3n nos saldr\u00e1 los datos que tenemos que meter en la conexi\u00f3n como la ip del servidor de Albaladejo en mi caso, el puerto y lo m\u00e1s importante el usuario y la contrase\u00f1a de la base de datos y el usuario:</p> <p></p> <p>Ya metido todos esos datos podremos ver que se nos ha conectado perfectamente a la base de datos de Albaladejo y podemos ver la base de datos que se llama prueba que dentro tiene una colecci\u00f3n que se llama usuarios y vemos el contenido de este, solo tiene dos documentos insertados:</p> <p></p> <p>Para crear otro documento le daremos en ADD DATA y tenemos dos formas de a\u00f1adir documentos de forma manual, que ser\u00eda la parte de \u201cinsert document\u201d o bien si tenemos un archivo JSON pues lo podremos meter con la opci\u00f3n de \u201cImport JSON or CSV file\u201d. En nuestro caso crearemos un  archivo de forma manual:</p> <p></p> <p>Para crear el documento pues ser\u00eda parecido que si lo hacemos desde la l\u00ednea de comando voy a\u00f1adir el documento Pineda que tiene el nombre y el apellido el ID se lo dar\u00e1 mongodb el solo y para insertar le daremos a insert:</p> <p></p> <p>Para modificar un documento le daremos a este y en la parte inferior derecha veremos una opci\u00f3n de update le daremos a esta y nos dejar\u00e1 modificar el documento, si queremos a\u00f1adir nuevos valores pues le daremos al m\u00e1s que temos en la parte de la izquierda y ponemos la clave y el valor en mi caso localidad, y para guardas cambios le daremos a update:</p> <p></p> <p>Y aqu\u00ed podemos ver que se ha actualizado con \u00e9xito:</p> <p>Tambi\u00e9n podemos hacer consultas para ello le daremos a la parte de querry, y nos saldr\u00e1 una terminal en la que podremos poner todas la consultas, eliminaciones \u2026 de los documentos y colecciones en mi caso voy hacer una simple consulta y como vemos funciona perfectamente:</p> <p></p> <p>Y ya para finalizar vamos a eliminar un documento en nuestro caso el de Raul que no esta en nuestro grupo, para ello es tan simple como darle a delete y eliminarlo :</p> <p></p> <p>Con mongo comp\u00e1s hemos visto que es una aplicaci\u00f3n muy \u00fatil ya que la administraci\u00f3n de la base de datos se hace muy sencilla y amena.</p>"},{"location":"BBDD/instalaciones/#tabla-comparativa-nosql","title":"Tabla comparativa NoSQL","text":"Cassandra Redis CouchDB Neo4J VENTAJAS Operaciones de mantenimiento sin interrumpir el servicio. El  acceso a la informaci\u00f3n es muy r\u00e1pido ya que los datos se almacena en memoria principal Cuenta con mecanismos integrados para resolver conflictos de forma autom\u00e1tica Permite representar relaciones complejas de forma intuitiva mediante un modelo de grafo, donde los nodos representan entidades y las aristas representan las conexiones directas entre ellas Almacenamiento columnar que permite optimizar las consultas y an\u00e1lisis. Redis permite asignar un tiempo de vida a las claves, lo que facilita la expiraci\u00f3n autom\u00e1tica de datos cuando ya no son necesarios. Alta disponibilidad Consultas a alta velocidad sobre relaciones. En lugar de depender de JOINS, accede directamente a las relaciones. Optimizado para manejar grandes vol\u00famenes de datos distribuidos. Redis admite transacciones, lo que significa que los comandos pueden ejecutarse como una cola en lugar de ejecutarse uno a la vez Accesible a trav\u00e9s de HTTP, lo que facilita la integraci\u00f3n con aplicaciones web. El lenguaje es f\u00e1cil de aprender y usar. Est\u00e1 inspirado en SQL. Soporte de c\u00f3digo abierto con una comunidad activa y opciones empresariales Redis tiene clientes en todos los lenguajes de programaci\u00f3n populares, permitiendo un uso mucho m\u00e1s flexible Permite almacenar datos sin un esquema fijo, adapt\u00e1ndose a datos din\u00e1micos. Tiene una amplia comunidad de usuarios, para solucionar problemas que se presenten. MODELO DE DATOS Basado en columnas Clave-valor Orientado a documentos Grafos de nodos y relaciones LENGUAJE CQL Operaciones Clave-Valor JavaScript Cypher CASOS DE USO Big Data . Almacena y procesa grandes vol\u00famenes de datos en tiempo real, ideal para an\u00e1lisis de clics, logs y telemetr\u00eda. Caching. Para acceder a datos r\u00e1pidamente sin recurrir a la base de datos principal. Aplicaciones sin conexi\u00f3n. Ya que permite la sincronizaci\u00f3n autom\u00e1tica cuando el dispositivo vuelve a estar conectado Redes sociales. Las conexiones entre personas y las interacciones son claves Big Data. Almacena y procesa grandes vol\u00famenes de datos en tiempo real, ideal para an\u00e1lisis de clics, logs y telemetr\u00eda. Caching. Para acceder a datos r\u00e1pidamente sin recurrir a la base de datos principal Aplicaciones sin conexi\u00f3n. Ya que permite la sincronizaci\u00f3n autom\u00e1tica cuando el dispositivo vuelve a estar conectado Redes sociales. Las conexiones entre personas y las interacciones son claves Gesti\u00f3n de contenido. Almacena y entrega r\u00e1pidamente contenido multimedia. Contadores en tiempo real. Como los de visitas a sitios web o los likes en redes sociales. Entornos multiusuarios. Perfecto para escenarios donde se necesita replicar datos entre m\u00faltiples servidores o dispositivos Sistemas de recomendaci\u00f3n. Donde se desarrollar conexiones entre usuarios, productos y otros elementos Alta disponibilidad. Aplicaciones cr\u00edticas (bancos, comercio electr\u00f3nico) que no pueden permitirse ca\u00eddas del servicio. Sesiones de usuario para aplicaciones web. La persistencia a largo plazo no es necesaria Sistemas de gesti\u00f3n de contenido. Almacena datos en formato JSON, ideal para aplicaciones que manejan documentos flexibles o datos no estructurados Mapeo de redes de colaboraci\u00f3n o influencia. Los sistemas de investigaci\u00f3n pueden analizar redes de colaboraci\u00f3n entre investigadores o influencias dentro de comunidades profesionales."},{"location":"BBDD/interconexion/","title":"INTERCONEXI\u00d3N DE SERVIDORES DE BASES DE DATOS","text":"<p>Las interconexiones de servidores de bases de datos son operaciones que pueden ser muy \u00fatiles en diferentes contextos. B\u00e1sicamente, se trata de acceder a datos que no est\u00e1n almacenados en nuestra base de datos, pudiendo combinarlos con los que ya tenemos.</p> <p>En esta pr\u00e1ctica veremos varias formas de crear un enlace entre distintos servidores de bases de datos.</p>"},{"location":"BBDD/interconexion/#realizar-un-enlace-entre-dos-servidores-de-bases-de-datos-oracle-explicando-la-configuracion-necesaria-en-ambos-extremos-y-demostrando-su-funcionamiento-realizando-alguna-operacion-que-implique-el-uso-simultaneo-de-ambas-bases-de-datos","title":"Realizar un enlace entre dos servidores de bases de datos ORACLE, explicando la configuraci\u00f3n necesaria en ambos extremos y demostrando su funcionamiento realizando alguna operaci\u00f3n que implique el uso simult\u00e1neo de ambas bases de datos.","text":"<p>Lo primero que tenemos que tener ser\u00e1n dos servidores de bases de datos ORACLE. En mi caso los servidores ser\u00e1n abd (192.168.1.168) y abd2 (192.168.1.167). En cada uno de ellos tenemos un usuario alejandro con permisos sobre la base de datos.</p> <p>Vamos a configurar los ficheros tnsnames.ora de cada servidor. Como ya sabemos estos ficheros se usan para definir alias de red para permitir a las aplicaciones clientes conectarse a una base de datos Oracle.</p> <p>En el servidor abd y abd2 quedar\u00edan de la siguiente forma:</p> <p></p> <p>A continuaci\u00f3n tenemos que asegurarnos que el fichero sqlnet.ora, que se utiliza para resolver los nombres de servicio de Oracle, est\u00e9 siendo utilizado correctamente. Quedar\u00eda as\u00ed:</p> <p></p> <p>Una vez que hayamos modificado estos archivos tendremos que reiniciar el servicio de Oracle, para que se apliquen los cambios. <code>sudo /etc/init.d/oracledb_ORCLCDB-21c restart</code></p> <p>Si queremos acceder desde nuestra m\u00e1quina cliente a los servidores, tendremos que configurar el tnsnames.ora tambi\u00e9n en el cliente que quedar\u00eda de la misma forma.</p> <p>A continuaci\u00f3n vamos a usar un comando nuevo como es tnsping. Es un comando que verifica si el nombre del servicio definido en tnsnames.ora se puede resolver o no correctamente. Simula una conexi\u00f3n a la base de datos especificada sin llegar a conectarse.</p> <p></p> <p>Como vemos, al hacer tnsping  a las dos bases de datos que tenemos, ha salido satisfactoriamente, por lo que lo tenemos bien configurado.</p> <p>Ahora nos vamos a conectar a la base de datos de abd donde vamos a crear el enlace para poder acceder a datos de la base de datos de abd2:</p> <pre><code>ale@vodkita:~$ sqlplus alejandro/contrase\u00f1a@//abd:1521/ORCLCDB\n[...]\nSQL&gt; CREATE DATABASE LINK abd2_link CONNECT TO alejandro IDENTIFIED BY contrase\u00f1a USING 'ABD2';\n\nEnlace con la base de datos creado.\n</code></pre> <p>Para ver el funcionamiento vamos a crear alguna tabla en cada una de las bases de datos.</p> <p>En abd creamos la tabla de empleados con algunos datos como id, nombre y puesto.</p> <pre><code>SQL&gt; CREATE TABLE empleados (\n    empleado_id NUMBER PRIMARY KEY,\n    nombre VARCHAR2(30),\n    puesto VARCHAR2(30));\n\nTabla creada.\n\nSQL&gt; INSERT INTO empleados VALUES (1,'Alejandro', 'Ingeniero');\n\n1 fila creada.\n\nSQL&gt; INSERT INTO empleados VALUES (2,'Pineda', 'Analista');\n\n1 fila creada.\n\nSQL&gt; INSERT INTO empleados VALUES (3,'Kiko', 'Desarrollador');\n\n1 fila creada.\n\n</code></pre> <p>A continuaci\u00f3n nos conectamos a la base de datos del servidor abd2, donde vamos a crear una tabla proyectos, con el id, nombre y el empleado a cargo.</p> <pre><code>ale@vodkita:~$ sqlplus alejandro/contrase\u00f1a@//abd2:1521/ORCLCDB\n[...]\nSQL&gt; CREATE TABLE proyectos (\n    proyecto_id NUMBER PRIMARY KEY,\n    nombre VARCHAR2(100),\n    empleado_id NUMBER);\n\nTabla creada.\n\nSQL&gt; INSERT INTO proyectos VALUES (1,'Desarrollo de Software',1);\n\n1 fila creada\n\nSQL&gt; INSERT INTO proyectos VALUES (2,'Implementaci\u00f3n de sistema',2);\n\n1 fila creada\n\nSQL&gt; INSERT INTO proyectos VALUES (3,'Actualizaci\u00f3n de infraestructura',3);\n\n1 fila creada\n\n</code></pre> <p>Una vez que tengamos ya los datos insertados, vamos a poder hacer una consulta estando conectados a abd, obteniendo datos que existe en abd2.</p> <p>Por ejemplo con los datos que hemos introducido, vamos a sacar el nombre del empleado, el puesto y proyecto en el que est\u00e1n involucrados todos los empleados.</p> <p></p> <p>Como vemos, hemos creado una consulta usando el abd2_link  que hemos creado anteriormente.</p> <p>Para comprobar que tenemos el enlace creado, podemos hacerlo con la siguiente consulta:</p> <pre><code>SELECT db_link, username, host\nFROM user_db_links;\n\nDB_LINK         USERNAME        HOST\n-------------   -----------     ------------\nABD2_LINK       ALEJANDRO       ABD2        \n</code></pre> <p>Donde vemos el nombre del enlace (abd2_link), el usuario que tiene acceso a ese enlace (alejandro) y el host al que va dirigido ese enlace (abd2)</p> <p>Este enlace solamente nos va a servir si nos conectamos a abd, pero si queremos que tambi\u00e9n nos sirva si nos conectamos a abd2, tendremos que crear un nuevo link en dicha base de datos. Para ello, entramos en abd2 y ejecutamos el comando que usamos antes para crear el link, pero cambiando USING \u2018ABD2\u2019 POR  USING \u2018ABD\u2019</p> <pre><code>ale@vodkita:~$ sqlplus alejandro/contrase\u00f1a@//abd2:1521/ORCLCDB\n[...]\nSQL&gt; CREATE DATABASE LINK abd2_link CONNECT TO alejandro IDENTIFIED BY contrase\u00f1a USING 'ABD';\n\nEnlace con la base de datos creado.\n</code></pre> <p>Ahora para hacer la consulta, hay que modificar, para que en lugar de seleccionar la tabla proyectos con el enlace, sea la tabla empleados, ya que en esta base de datos la que tenemos nosotros es la de proyectos.</p> <p></p> <p>Vemos que nos devuelve la misma informaci\u00f3n. Si comprobamos la tabla empleado en abd2, vemos que no tiene datos, sin embargo, si hacemos la consulta sobre el link, vemos que s\u00ed:</p> <p></p>"},{"location":"BBDD/interconexion/#realizar-un-enlace-entre-dos-servidores-de-bases-de-datos-postgres-explicando-la-configuracion-necesaria-en-ambos-extremos-y-demostrando-su-funcionamiento-realizando-alguna-operacion-que-implique-el-uso-simultaneo-de-ambas-bases-de-datos","title":"Realizar un enlace entre dos servidores de bases de datos Postgres, explicando la configuraci\u00f3n necesaria en ambos extremos y demostrando su funcionamiento realizando alguna operaci\u00f3n que implique el uso simult\u00e1neo de ambas bases de datos.","text":"<p>Para empezar vamos a crear una base de datos en cada servidor. En el servidor abd: </p> <pre><code>ale@abd:~$ sudo -u postgres psql\n[...]\n\npostgres=# CREATE DATABASE pruebas;\nCREATE DATABASE\n\npostgres=# \\c pruebas\nYou are now connected to database \"pruebas\" as user \"postgres\".\npruebas=# GRANT ALL PRIVILEGES ON DATABASE pruebas TO alejandro;\nGRANT\npruebas=# ALTER DATABASE pruebas OWNER TO alejandro;\nALTER DATABASE\npruebas=&gt; CREATE TABLE empleados(\n    empleado_id NUMERIC PRIMARY KEY,\n    nombre VARCHAR(20),\n    puesto VARCHAR(20));\nCREATE TABLE\npruebas=&gt; INSERT INTO empleados VALUES (1,'Alejandro', 'Ingeniero'),(2,'Pineda','Analista'),(3,'Kiko','Desarrollador');\nINSERT 0 3\n\npruebas=&gt; select * from empleados;\n empleado_id |  nombre   |    puesto\n-----------------------------------------\n           1 | Alejandro | Ingeniero\n           2 | Pineda    | Analista\n           3 | Kiko      | Desarrollador\n(3 filas)\n</code></pre> <p>Ahora nos vamos al servidor abd2</p> <pre><code>ale@abd2:~$ sudo -U alejandro -h 192.168.1.167 -d pruebas \n\n[...]\npruebas=&gt; CREATE TABLE proyectos(\n    proyecto_id NUMERIC PRIMARY KEY,\n    nombre VARCHAR(25),\n    empleado_id NUMERIC);\nCREATE TABLE\n\npruebas=&gt; INSERT INTO   proyectos VALUES (1,'Infraestructura', 1),(2,'Implantacion sistema',2),(3,'Desarrollo software',3);\nINSERT 0 3\n\npruebas=&gt; select * from proyectos;\n proyecto_id |        nombre        | empleado_id\n--------------------------------------------------\n           1 | Infraestructura      |           1\n           2 | Implantacion sistema |           2\n           3 | Desarrollo software  |           3\n(3 filas)\n</code></pre> <p>Ahora  vamos a crear un DBLINK, para ello, habr\u00e1 que ser superusuario, as\u00ed que entraremos con el usuario postgres.</p> <p>Para crear el enlace:</p> <pre><code>postgres=# CREATE EXTENSION dblink;\nCREATE EXTENSION\n</code></pre> <p></p> <p>Tanbi\u00e9n lo crearemos en el otro servidor.</p> <p></p> <p>Para comprobar el funcionamiento, nos metemos en el servidor abd y haremos una consulta donde ser\u00e1 una consulta a la base de datos del servidor abd2.</p> <pre><code>SELECT * FROM dblink('host=192.168.1.167 dbname=pruebas user=alejandro password=contrase\u00f1a', 'SELECT proyecto_id, nombre, empleado_id FROM proyectos')\nAS proyectos(proyecto_id NUMERIC, nombre VARCHAR, empleado_id NUMERIC);\n proyecto_id |        nombre        | empleado_id\n--------------------------------------------------\n           1 | Infraestructura      |           1\n           2 | Implantacion sistema |           2\n           3 | Desarrollo software  |           3\n(3 filas)\n</code></pre> <p>Si hacemos una consulta en la que queramos datos de las dos tablas, como por ejemplo el nombre y el proyecto asociado:</p> <p></p>"},{"location":"BBDD/interconexion/#realizar-un-enlace-bidireccional-entre-un-servidor-oracle-y-otro-postgres-empleando-heterogeneus-services-explicando-la-configuracion-necesaria-en-ambos-extremos-y-demostrando-su-funcionamiento-realizando-alguna-operacion-que-implique-el-uso-simultaneo-de-ambas-bases-de-datos","title":"Realizar un enlace bidireccional entre un servidor ORACLE y otro Postgres empleando Heterogeneus Services, explicando la configuraci\u00f3n necesaria en ambos extremos y demostrando su funcionamiento realizando alguna operaci\u00f3n que implique el uso simult\u00e1neo de ambas bases de datos.","text":"<p>Lo primero que vamos a realizar es la instalaci\u00f3n de los controladores para postgresql.</p> <p><code>ale@oracle19:~$ sudo apt install unixodbc odbc-postgresql</code></p> <p>Una vez que ya tengamos los controladores instalados, pasamos a la configuraci\u00f3n de algunos archivos necesarios para la interconexi\u00f3n entre Postgresql y Oracle.</p> <p>El primer fichero a configurar es el /etc/odbcinst.ini. Este fichero lo que hace es configurar los controladores ODBC que se van a utilizar para conectarse a diferentes bases de datos. Quedar\u00eda de la siguiente manera:</p> <pre><code>ale@oracle19:~$ sudo cat /etc/odbcinst.ini \n[PostgreSQL ANSI]\nDescription = PostgreSQL ODBC driver (ANSI version)\nDriver = /usr/lib/x86_64-linux-gnu/odbc/psqlodbca.so\nDebug = 0\nCommLog = 1\nUsageCount = 1\n[PostgreSQL Unicode]\nDescription = PostgreSQL ODBC driver (Unicode version)\nDriver = /usr/lib/x86_64-linux-gnu/odbc/psqlodbcw.so\nDebug = 0\nCommLog = 1\nUsageCount = 1\n</code></pre> <p>El siguiente fichero de configuraci\u00f3n es el /etc/odbc.ini. Este fichero lo que hace es configurar las conexiones DSN para bases de datos espec\u00edficas a trav\u00e9s de ODBC</p> <pre><code>ale@oracle19:~$ sudo cat /etc/odbc.ini \n[PSQLA]\nDebug = 0\nCommLog = 0\nReadOnly = 1\nDriver = PostgreSQL ANSI\nServername = 192.168.1.168\nUsername = alejandro\nPassword = contrase\u00f1a\nPort = 5432\nDatabase = pruebas\nTrace = 0\nTraceFile = /tmp/sql.log\n\n[PSQLU]\nDebug = 0\nCommLog = 0\nReadOnly = 0\nDriver = PostgreSQL Unicode\nServername = 192.168.1.168\nUsername =  alejandro\nPassword = contrase\u00f1a\nPort = 5432\nDatabase = pruebas\nTrace = 0\nTraceFile = /tmp/sql.log\n\n[Default]\nDriver = /opt/oracle/product/19c/dbhome_1/lib/libsqora.so.19.1\n</code></pre> <p>Ahora con el comando  odbcinst -q -d , vamos a buscar los controladores que hemos configurado anteriormente.</p> <pre><code>ale@oracle19:~$ odbcinst -q -d\n[PostgreSQL ANSI]\n[PostgreSQL Unicode]\n</code></pre> <p>Tambi\u00e9n podemos probar el funcionamiento de la conexi\u00f3n a la base de datos Postgres desde el otro servidor. Esto lo haremos con el comando:</p> <p><code>ale@oracle19:~$ isql -v PSQLA</code></p> <p>Si entramos podremos hacer alguna consulta sobre la base de datos de postgres:</p> <p></p> <p>De la misma manera podremos hacerlo con PSQLU</p> <p></p> <p>Ahora tendremos que crear un enlace desde Oracle a Postgres. Para ello crearemos un nuevo fichero para que Oracle pueda conectarse a una base de datos externa.</p> <pre><code>ale@oracle19:~$ sudo cat /opt/oracle/product/19c/dbhome_1/hs/admin/initPSQLU.ora \nHS_FDS_CONNECT_INFO = PSQLU\nHS_FDS_TRACE_LEVEL = Debug\nHS_FDS_SHAREABLE_NAME = /usr/lib/x86_64-linux-gnu/odbc/psqlodbcw.so\nHS_LANGUAGE = AMERICAN_AMERICA.WE8ISO8859P1\nset ODBCINI=/etc/odbc.ini\n</code></pre> <p>HS_FDS_CONNECT_INFO = PSQLU: Define el nombre del DSN, que anteriormente lo hemos configurado en odbc.ini</p> <p>HS_FDS_TRACE_LEVEL = Debug: Activa el registro de depuraci\u00f3n detallada para las conexiones.</p> <p>HS_FDS_SHAREABLE_NAME = /usr/lib/x86_64-linux-gnu/odbc/psqlodbcw.so: Es el archivo del controlador ODBC que Oracle debe usar para conectarse a PostgreSQL.</p> <p>HS_LANGUAGE = AMERICAN_AMERICA.WE8ISO8859P1: Esto configura la configuraci\u00f3n regional y la codificaci\u00f3n de caracteres para la conexi\u00f3n.</p> <p>set ODBCINI=/etc/odbc.ini: Por \u00faltimo se establece la ubicaci\u00f3n del archivo de configuraci\u00f3n ODBC que contiene la definici\u00f3n del DSN para PostgreSQL.</p> <p>A continuaci\u00f3n tenemos que modificar el fichero listener.ora para incluir la configuraci\u00f3n necesaria para que Oracle pueda comunicarse a trav\u00e9s del DG4ODBC.</p> <pre><code>ale@oracle19:~$ sudo cat /opt/oracle/product/19c/dbhome_1/network/admin/listener.ora\nLISTENER =\n  (DESCRIPTION_LIST =\n    (DESCRIPTION =\n      (ADDRESS = (PROTOCOL = TCP)(HOST = oracle19)(PORT = 1521))\n      (ADDRESS = (PROTOCOL = IPC)(KEY = EXTPROC1521))\n    )\n  )\n\nSID_LIST_LISTENER =\n  (SID_LIST =\n    (SID_DESC =\n      (SID_NAME = PSQLU)\n      (ORACLE_HOME = /opt/oracle/product/19c/dbhome_1)\n      (PROGRAM = dg4odbc)\n    )\n  )\n</code></pre> <p>Por \u00faltimo, tambi\u00e9n tenemos que modificar el tnsnames.ora para a\u00f1adir una entrada que permita a Oracle conectarse a PostgreSQL.</p> <pre><code>ale@oracle19:~$ sudo cat /opt/oracle/product/19c/dbhome_1/network/admin/tnsnames.ora \nORCLCDB =\n  (DESCRIPTION =\n    (ADDRESS = (PROTOCOL = TCP)(HOST = oracle19)(PORT = 1521))\n    (CONNECT_DATA =\n      (SERVER = DEDICATED)\n      (SERVICE_NAME = ORCLCDB)\n    )\n  )\n\nLISTENER_ORCLCDB =\n  (ADDRESS = (PROTOCOL = TCP)(HOST = oracle19)(PORT = 1521))\n\nPSQLU =\n  (DESCRIPTION=\n    (ADDRESS=(PROTOCOL=tcp)(HOST=localhost)(PORT=1521))\n    (CONNECT_DATA=(SID=PSQLU))\n    (HS=OK)\n  )\n</code></pre> <p>Cuando ya lo tengamos todo, podemos reiniciar el servicio de Oracle, para aplicar las modificaciones realizadas.</p> <p><code>ale@oracle10:~$ sudo /etc/init.d/oracledb_ORCLCDB-19c restart</code></p> <p>Y entramos como sys para crear un enlace a la base de datos de PostgreSQL:</p> <pre><code>ale@oracle19:~$ rlwrap sqlplus / as sysdba\n\nSQL&gt; CREATE PUBLIC DATABASE LINK postgres connect to \"alejandro\" IDENTIFIED BY \"alejandro\" USING 'PSQLU';\n\nEnlace con la base de datos creado.\n</code></pre> <p>Ahora nos conectamos con nuestro usuario:</p> <pre><code>SQL&gt; connect alejandro\nIntroduzca la contrase\u00f1a: *************\nIntroduzca la contrase\u00f1a:\nConectado.\n</code></pre> <p>Y podemos hacer una consulta a la base de datos de PostgreSQL usando el link creado.</p> <pre><code>SQL&gt; SELECT \"nombre\" FROM \"empleados\"@postgres;\nnombre\n---------------------------------------\nAlejandro\nPineda\nKiko\n</code></pre> <p>Tambi\u00e9n podr\u00edamos hacer un join con una tabla que tenemos creada en oracle, de proyectos, para comprobar el funcionamiento.</p> <pre><code>SQL&gt; SELECT p.nombre AS Proyecto, e.\"nombre\" AS Empleado \nFROM PROYECTOS p, \"empleados\"@postgres e\nWHERE p.empleado_id = e.\"empleado_id\"@postgres;\nPROYECTO                        EMPLEADO\n---------------------------     --------------------------\nDesarrollo de Software          Alejandro\nImplementaci\u00f3n de sistema       Pineda\nInfraestructuras                Kiko\n</code></pre>"},{"location":"BBDD/sql-plsql/","title":"SQL - PLSQL","text":""},{"location":"BBDD/sql-plsql/#oracle","title":"ORACLE","text":""},{"location":"BBDD/sql-plsql/#parte-sql","title":"PARTE SQL","text":"<p>Crea las siguientes tablas en Postgres y en ORACLE, con las restricciones correspondientes.</p> TABLA PRODUCTOS CodProducto NUMBER Nombre VARCHAR2, de 20 Tipo VARCHAR2, de 15 Menaje, Inform\u00e1tica o Telefon\u00eda PrecioUnitario NUMBER Entre 0 y 5000 TABLA CLIENTES DNICliente VARCHAR2, de 10 8 n\u00fameros, un gui\u00f3n y una may\u00fascula Nombre VARCHAR2, de 20 FechaAlta Fecha Posterior a 2019 Pa\u00eds VARCHAR2, de 20 Espa\u00f1a, Italia o Francia TABLA VENTAS CodProducto NUMBER DNICliente VARCHAR2, de 10 FechaVenta Fecha NumUnidades NUMBER <p>TABLA PRODUCTOS</p> <pre><code>CREATE TABLE PRODUCTOS(\n    CodProducto NUMBER,\n    Nombre VARCHAR2(20),\n    Tipo VARCHAR2 (15),\n    PrecioUnitario NUMBER,\n    CONSTRAINT PK_productos PRIMARY KEY (CodProducto),\n    CONSTRAINT Chk_Tipo CHECK (Tipo IN ('Menaje', 'Informatica', 'Telefonia')),\n    CONSTRAINT Chk_Precio CHECK (PrecioUnitario BETWEEN 0 AND 5000) \n);\n</code></pre> <p>TABLA CLIENTES</p> <pre><code>CREATE TABLE CLIENTES(\n    DNI_Cliente VARCHAR2(10),\n    Nombre VARCHAR2(20),\n    FechaAlta DATE,\n    Pais VARCHAR2(20),\n    CONSTRAINT PK_Clientes PRIMARY KEY (DNI_CLIENTE),\n    CONSTRAINT Chk_DNI CHECK (REGEXP_LIKE(DNI_CLIENTE, '^[0-9]{8}-[A-Z]$')),\n    CONSTRAINT Chk_Alta CHECK (FechaAlta &gt; DATE '2019-12-31'),\n    CONSTRAINT Chk_Pais CHECK (Pais IN ('Espa\u00f1a', 'Italia', 'Francia'))\n);\n\n</code></pre> <p>TABLA VENTAS</p> <pre><code>CREATE TABLE VENTAS(\n    CodProducto NUMBER,\n    DNI_Cliente VARCHAR2(10),\n    FechaVenta DATE,\n    NumUnidades NUMBER,\n    CONSTRAINT PK_Ven PRIMARY KEY (DNI_CLIENTE, FechaVenta, CodProducto),\n    CONSTRAINT FK_Cod FOREIGN KEY (CodProducto) REFERENCES PRODUCTOS(CodProducto),\n    CONSTRAINT FK_Dni FOREIGN KEY (DNI_CLIENTE) REFERENCES CLIENTES(DNI_CLIENTE)   \n);\n</code></pre> <p>Realizar una consulta que muestre el nombre del \u00faltimo producto que compr\u00f3 cada cliente que ha realizado alguna compra en los \u00faltimos diez d\u00edas.</p> <pre><code>SELECT P.Nombre as producto, C.Nombre as cliente   \nFROM PRODUCTOS P , CLIENTES C \nWHERE (P.codproducto, C.DNI_Cliente) IN (SELECT V.codproducto, V.DNI_Cliente\n                                         FROM VENTAS v\n                                         WHERE V.FechaVenta IN (SELECT MAX(FechaVenta)\n                                                                FROM VENTAS V2 \n                                                                WHERE V2.DNI_CLIENTE = V.DNI_CLIENTE)\n                                         AND FechaVenta &gt;= SYSDATE -10);\n\nPRODUCTO            CLIENTE\n-----------------   ----------\nRedmi Note 10       Alejandro\nTeclado             Raul\n</code></pre> <p>Realizar una consulta que muestre el importe total de las compras de productos de Tipo \u2018Menaje\u2019 para cada uno de los clientes junto con el nombre de dicho cliente incluyendo aquellos que no han comprado productos de ese tipo.</p> <pre><code>SELECT C.Nombre as cliente, COALESCE(SUM(V.NumUnidades * P.PrecioUnitario),0) as importe\nFROM Clientes C , PRODUCTOS P, VENTAS V \nWHERE C.DNI_CLIENTE = V.DNI_CLIENTE (+)\nAND P.CODPRODUCTO = V.CODPRODUCTO (+)\nAND Tipo = 'Menaje'\nGROUP BY C.NOmbre;\n\nCLIENTE             IMPORTE\n---------------     -----------\nAlejandro           60\nRaul                150\nLucia               10\nSophie              90\nAlessia             0\nKiki                0\nPierre              0\nJacques             0\nPinedi              0\n\n9 filas seleccionadas.\n</code></pre> <p>Realizar una vista llamada \u2018Productos de Telefon\u00eda\u2019 con los siguientes datos: C\u00f3digo del Producto, Nombre del Producto, Importe Total de las Ventas del Producto, Fecha de la \u00faltima venta del producto y pa\u00eds del primer cliente que lo compr\u00f3. En la vista solo deben aparecer los art\u00edculos de tipo \u2018Telefon\u00eda\u2019.</p> <p>Primero creo una vista distinta para seleccionar el pa\u00eds del primer cliente que compr\u00f3 cada producto de Telefon\u00eda</p> <pre><code>CREATE OR REPLACE VIEW PrimerPais AS\nSELECT Pais, codproducto\nFROM CLIENTES C, PRODUCTOS P \nWHERE Tipo = 'Telefonia'\nAND (C.DNI_CLIENTE, P.CODPRODUCTO) IN (SELECT V.DNI_CLIENTE, V.CodProducto\n                                         FROM VENTAS V \n                                         WHERE FechaVenta = (SELECT MIN(FechaVenta)\n                                                             FROM VENTAS V2 \n                                                             WHERE V2.CODPRODUCTO = V.CODPRODUCTO));\n</code></pre> <p>Vista Principal:</p> <pre><code>CREATE OR REPLACE VIEW Productos_de_telefonia AS\nSELECT P.CODPRODUCTO, P.Nombre,SUM(P.PrecioUnitario * V.NumUnidades) as importe, MAX(FechaVenta) as UltVenta, Pais as Pais_Primera_Compra\nFROM VENTAS V, PRODUCTOS P , PrimerPais PP\nWHERE V.CODPRODUCTO = P.CODPRODUCTO\nAND V.CODPRODUCTO = PP.CODPRODUCTO\nAND Tipo = 'Telefonia'\nGROUP BY P.codproducto, P.Nombre, Pais;\n\nSELECT * FROM Productos_de_telefonia;\n\nCODPRODUCTO  NOMBRE             IMPORTE  ULTVENTA       PAIS_PRIMERA_COMPRA\n-----------  -----------------  -------- -------------  ---------------------\n7            Redmi Note 10      4500     28/11/24       Espa\u00f1a\n8            Tablet             750      05/04/23       Francia\n9            Smartwatch         300      25/05/22       Espa\u00f1a\n</code></pre> <p>Muestra los distintos tipos de productos junto al nombre del cliente que ha comprado m\u00e1s unidades de ese tipo de producto en los \u00faltimos diez a\u00f1os.</p> <pre><code>SELECT Tipo , C.Nombre as cliente\nFROM VENTAS V, PRODUCTOS P, CLIENTES C \nWHERE V.CODPRODUCTO = P.CODPRODUCTO\nAND V.DNI_CLIENTE = C.DNI_CLIENTE\nGROUP BY Tipo, C.NOmbre\nHAVING COUNT(*) = (SELECT MAX(COUNT(*))\n                    FROM PRODUCTOS P2, CLIENTES C2\n                    WHERE (P2.CodProducto,C2.DNI_Cliente) IN (SELECT V3.CodProducto, V3.DNI_Cliente\n                                                            FROM VENTAS V3\n                                                            WHERE V3.FechaVenta &gt;= (SYSDATE - (10*365)))\n                    AND P2.TIPO = P.TIPO\n                    GROUP BY P2.TIPO, C2.NOMBRE);\n\nTIPO           CLIENTE\n-----------    ------------\nMenaje         Raul\nInformatica    Raul\nTelefonia      Lucia\nTelefonia      Sophie\n</code></pre> <p>Aparecen 2 de Telefon\u00eda porque tienen el mismo n.\u00ba de compras.</p> <p>Realiza una consulta con operadores de conjuntos que nos diga qu\u00e9 art\u00edculos se han vendido tanto en enero como en febrero como en marzo.</p> <pre><code>SELECT NOMBRE FROM PRODUCTOS\nWHERE CODPRODUCTO IN (SELECT CODPRODUCTO FROM VENTAS\n                      WHERE TO_CHAR(FechaVenta,'MM')= 01)\nINTERSECT\nSELECT NOMBRE FROM PRODUCTOS\nWHERE CODPRODUCTO IN (SELECT CODPRODUCTO FROM VENTAS\n                      WHERE TO_CHAR(FechaVenta,'MM')= 02)\nINTERSECT\nSELECT NOMBRE FROM PRODUCTOS\nWHERE CODPRODUCTO IN (SELECT CODPRODUCTO FROM VENTAS\n                      WHERE TO_CHAR(FechaVenta,'MM')= 03);\n\nNOMBRE\n--------------\nOrdenador\nTaza\n</code></pre>"},{"location":"BBDD/sql-plsql/#parte-plsql","title":"PARTE PL/SQL","text":"<p>Realizar un procedimiento que reciba un tipo de producto, un mes y un a\u00f1o y muestre un listado de todas las compras que se han realizado de productos de dicho tipo en dicho mes agrupadas por pa\u00eds y cliente.</p> <p>PRINCIPAL</p> <pre><code>CREATE OR REPLACE PROCEDURE principal (\n    p_tipo PRODUCTOS.Tipo%type,\n    p_mes NUMBER,\n    p_anio NUMBER\n) IS\n    v_importe_total_tipo NUMBER := 0;\nBEGIN\n    Excepciones(p_tipo);\n    encabezado(p_tipo, p_mes, p_anio);\n    paises(p_tipo, p_mes, p_anio, v_importe_total_tipo);\n    DBMS_OUTPUT.PUT_LINE('Total Compras de Articulos de Tipo ' || p_tipo || ': ' || v_importe_total_tipo);\n    ExcecpcionPais(p_tipo, p_mes, p_anio);\nEND principal;\n/\n</code></pre> <p>EXCEPCIONES</p> <pre><code>CREATE OR REPLACE PROCEDURE Excecpciones(\n    p_tipo Productos.Tipo%type\n)\nIS\n    v_num NUMBER;\nBEGIN\n    v_num:=ExcepcionTipo(p_tipo);\n    IF v_num = 0 THEN\n        RAISE_APPLICATION_ERROR(-20001, 'No existen articulos de ese tipo');\n    ELSE \n        v_num:=ExcepcionVentas(p_tipo);\n        IF v_num = 0 THEN\n            RAISE_APPLICATION_ERROR(-20002, 'No existen ventas de ese tipo');\n        END IF;\n    END IF;\nEND;\n/\n</code></pre> <p>EXCEPCI\u00d3N DEL TIPO</p> <pre><code>CREATE OR REPLACE FUNCTION ExcepcionTipo (p_tipo Productos.Tipo%type) return NUMBER\nIS\n    v_cont NUMBER;\nBEGIN\n    SELECT COUNT(*) INTO v_cont\n    FROM Productos\n    WHERE Tipo = p_tipo;\n    return v_cont;\nEND;\n/\n</code></pre> <p>EXCEPCI\u00d3N VENTAS</p> <pre><code>CREATE OR REPLACE FUNCTION ExcepcionVentas (p_tipo Productos.Tipo%type) return NUMBER\nIS\n    v_cont NUMBER;\nBEGIN\n    SELECT COUNT(*) INTO v_cont\n    FROM Ventas\n    WHERE CODPRODUCTO IN (SELECT CODPRODUCTO\n                          FROM PRODUCTOS\n                          WHERE Tipo = p_tipo);\n    return v_cont;\nEND;\n/\n</code></pre> <p>EXCEPCI\u00d3N PA\u00cdS</p> <pre><code>CREATE OR REPLACE PROCEDURE ExcPaises(\n    p_tipo Productos.Tipo%type,\n    p_mes NUMBER, \n    p_anio NUMBER\n)\nIS\n    CURSOR c_paises IS\n        SELECT DISTINCT Pais FROM CLIENTES\n        MINUS\n        SELECT DISTINCT Pais\n        FROM CLIENTES\n        WHERE DNI_CLIENTE IN (SELECT DNI_CLIENTE\n                                  FROM VENTAS \n                                  WHERE TO_CHAR(Fechaventa, 'MM') = p_mes\n                                  AND TO_CHAR(FechaVenta, 'YYYY') = p_anio\n                                  AND CODPRODUCTO IN (SELECT CODPRODUCTO\n                                                      FROM PRODUCTOS \n                                                      WHERE Tipo = p_tipo));\nBEGIN\n    FOR v_cur IN c_paises LOOP\n        DBMS_OUTPUT.PUT_LINE('Desde el pais '|| v_cur.pais|| ' no se ha realizado ninguna compra en esa fecha');\n        DBMS_OUTPUT.PUT_LINE('_____________________________________________________________________');\n\n    END LOOP;\nEND;\n/\n</code></pre> <p>ENCABEZADO</p> <pre><code>create or replace procedure encabezado(\n    p_tipo Productos.Tipo%type,\n    p_mes NUMBER,\n    p_anio NUMBER\n) IS\nBEGIN\n    DBMS_OUTPUT.PUT_LINE(CHR(9)||'________________________________________');\n    DBMS_OUTPUT.PUT_LINE(CHR(9)|| 'Compras de articulos de tipo '|| p_tipo);\n    DBMS_OUTPUT.PUT_LINE(CHR(9)||CHR(9)||'Mes: '||RPAD(p_mes,5)|| 'Anio: '||p_anio);\n    DBMS_OUTPUT.PUT_LINE(CHR(9)||'________________________________________');\n    DBMS_OUTPUT.PUT_LINE(CHR(11));\nEND;\n/\n</code></pre> <p>INFORME</p> <pre><code>CREATE OR REPLACE PROCEDURE Informe (\n    p_tipo Productos.Tipo%type,\n    p_mes NUMBER,\n    p_anio NUMBER\n)\nIS\n    v_total_compras_articulos NUMBER:=0;\n    v_total_compras_pais NUMBER;\n    CURSOR c_paises IS\n        SELECT DISTINCT pais \n        FROM CLIENTES \n        WHERE DNI_CLIENTE IN (SELECT DNI_CLIENTE \n                              FROM VENTAS \n                              WHERE CODPRODUCTO IN (SELECT CODPRODUCTO\n                                                    FROM PRODUCTOS \n                                                    WHERE Tipo = p_tipo)\n                              and TO_CHAR(FechaVenta, 'MM') = p_mes\n                              and TO_CHAR(FechaVenta, 'YYYY' ) = p_anio);\nBEGIN\n    FOR v_cur IN c_paises LOOP\n        DBMS_OUTPUT.PUT_LINE('Pais: '||v_cur.pais);\n        InformePorPais(p_tipo, p_mes, p_anio, v_cur.pais, v_total_compras_pais);\n        v_total_compras_articulos := v_total_compras_articulos + v_total_compras_pais;\n      DBMS_OUTPUT.PUT_LINE('_____________________________________________________________________');\n    END LOOP;\n    ExcPaises(p_tipo, p_mes, p_anio);\n    DBMS_OUTPUT.PUT_LINE('Total compras de articulos de tipo '|| p_tipo||': '|| v_total_compras_articulos);\nEND;\n/\n</code></pre> <p>INFORME POR PA\u00cdS</p> <pre><code>CREATE OR REPLACE PROCEDURE InformePorPais(\n    p_tipo Productos.Tipo%type,\n    p_mes NUMBER,\n    p_anio NUMBER,\n    p_pais Clientes.Pais%type,\n    p_compras_pais OUT NUMBER\n)\nIS\n    v_compras_pais NUMBER:=0;\n    v_compras_clientes NUMBER;\n    CURSOR  c_clientes IS\n        SELECT DISTINCT DNI_CLIENTE\n        FROM VENTAS \n        WHERE CODPRODUCTO IN (SELECT CODPRODUCTO \n                              FROM PRODUCTOS \n                              WHERE Tipo = p_tipo)\n        AND TO_CHAR(FECHAVENTA, 'MM') = p_mes\n        AND TO_CHAR (FechaVenta, 'YYYY') = p_anio\n        AND DNI_CLIENTE IN (SELECT DNI_CLIENTE \n                            FROM CLIENTES\n                            WHERE Pais = p_pais);\n    v_nombre CLIENTES.NOmbre%type;\nBEGIN\n    FOR v_cur IN c_clientes LOOP\n        v_nombre:=DevolverNombreCliente(v_cur.DNI_CLIENTE);\n        DBMS_OUTPUT.PUT_LINE(CHR(9)|| 'Cliente: '||v_nombre); \n        InformePorCliente(p_tipo, p_mes, p_anio, v_nombre,v_cur.DNI_CLIENTE, v_compras_clientes) ;\n        v_compras_pais:=v_compras_pais+v_compras_clientes;\n\n    END LOOP;\n    DBMS_OUTPUT.PUT_LINE('Total compras '|| p_pais|| ': '|| v_compras_pais);\n    p_compras_pais:=v_compras_pais;\nEND;\n/\n</code></pre> <p>FUNCI\u00d3N DEVOLVER NOMBRE CLIENTE</p> <pre><code>CREATE OR REPLACE FUNCTION DevolverNombreCliente (p_dni CLIENTES.DNI_CLIENTE%TYPE)\nRETURN CLIENTES.Nombre%type\nIS\n    v_nombre CLIENTES.Nombre%type;\nBEGIN\n    SELECT Nombre Into v_nombre\n    FROM CLIENTES\n    WHERE DNI_CLIENTE = p_dni;\n    return v_nombre;\nEND;\n/\n</code></pre> <p>INFORME CLIENTES</p> <pre><code>CREATE OR REPLACE PROCEDURE InformePorCliente(\n    p_tipo Productos.Tipo%type,\n    p_mes NUMBER,\n    p_anio NUMBER, \n    p_nombre CLIENTES.Nombre%type,\n    p_dni CLIENTES.DNI_CLIENTe%type,\n    p_compras_cliente OUT NUMBER\n)\nIS\n    v_compras_cliente NUMBER:=0;\n    v_importe_clientes NUMBER:=0;\n    CURSOR c_compras IS\n        SELECT p.codproducto as codproducto, Fechaventa, (v.NumUnidades * p.PrecioUnitario) as importe \n        FROM VENTAS V, PRODUCTOS P  \n        WHERE V.CODPRODUCTO = P.CODPRODUCTO\n        AND DNI_CLIENTE = p_dni\n        AND TO_CHAR(Fechaventa, 'MM') = p_mes\n        AND TO_CHAR(FechaVenta, 'YYYY') = p_anio;\nBEGIN\n    DBMS_OUTPUT.PUT_LINE(CHR(9)|| CHR(9) || RPAD('Codproducto', 15)|| RPAD('FechaVenta', 15)||'Importe Compra');\n    FOR v_cur IN c_compras LOOP\n        DBMS_OUTPUT.PUT_LINE(CHR(9)|| CHR(9) || RPAD(v_Cur.Codproducto, 15)|| RPAD(v_cur.FechaVenta, 15)||v_cur.importe);\n        v_compras_cliente:=v_compras_cliente + 1;\n        v_importe_clientes:=v_importe_clientes + v_cur.importe;\n    END LOOP;\n    DBMS_OUTPUT.PUT_LINE(CHR(9)|| 'Importe total cliente '||p_nombre|| ': '|| v_importe_clientes);\n    DBMS_OUTPUT.PUT_LINE(CHR(9)||' _ _ _ _ _ _ _ _ _ _ _ _  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _');\n\n    p_compras_cliente:=v_compras_cliente;\nEND;\n/\n</code></pre> <p>COMPROBACI\u00d3N</p> <p></p> <p></p> <p>Realizar un trigger que cuando se inserte una venta mantenga correctamente actualizada la columna ProductoMasCaroComprado (que previamente has de crear y rellenar mediante un procedimiento) en la tabla Clientes.</p> <p>MODIFICACI\u00d3N TABLA CLIENTES</p> <pre><code>ALTER TABLE CLIENTES\nADD  ProductoMasCaroComprado NUMBER;\n</code></pre> <p>Rellenar columna ProductoMasCaroComprado</p> <pre><code>CREATE OR REPLACE PROCEDURE RellenarColumna \nIS\n    CURSOR c_productos  IS\n        SELECT DNI_CLIENTE, CODPRODUCTO\n        FROM VENTAS V\n        WHERE V.CODPRODUCTO IN (SELECT CODPRODUCTO \n                                FROM PRODUCTOS P \n                                WHERE PrecioUnitario = (SELECT MAX(PRECIOUNITARIO)\n                                                         FROM PRODUCTOS P2 \n                                                         WHERE P2.CODPRODUCTO IN (SELECT CODPRODUCTO\n                                                                                  FROM VENTAS V2\n                                                                                  WHERE V2.DNI_CLIENTE = V.DNI_CLIENTE)))\n        GROUP BY DNI_CLIENTE, CODPRODUCTO;\nBEGIN\n    FOR v_cur IN c_productos  LOOP\n        UPDATE CLIENTES \n        SET ProductoMasCaroComprado = v_cur.CODPRODUCTO\n        WHERE DNI_CLIENTE = v_cur.DNI_CLIENTE;\n    END LOOP;\nEND;\n/\n</code></pre> <p>Trigger actualizar_producto_mas_caro_clientes</p> <pre><code>CREATE OR REPLACE TRIGGER ACTUALIZAR_PRODUCTO_MAS_CARO \nAFTER INSERT ON VENTAS\nFOR EACH ROW\nDECLARE\n    v_precio_antiguo PRODUCTOS.PrecioUnitario%type;\n    v_precio_nuevo PRODUCTOS.PrecioUnitario%type;\n    v_codproducto_mas_caro_actual CLIENTES.ProductoMasCaroComprado%TYPE;\nBEGIN\n    v_codproducto_mas_caro_actual:=DevolverCodproductoMascaro(:new.DNI_CLIENTE);\n    v_precio_antiguo:=DevolverPrecio(v_codproducto_mas_caro_actual);\n    v_precio_antiguo:=DevolverPrecio(:new.codproducto);\n    IF v_precio_nuevo &gt; v_precio_antiguo THEN\n        UPDATE CLIENTES\n        SET ProductoMasCaroComprado = :new.codproducto\n        WHERE DNI_CLIENTE = :new.DNI_CLIENTE;\n    END IF;\nEND;\n/\n</code></pre> <p>Funciones DevolverCodproductoMascaro y DevolverPrecio utilizadas en el trigger anterior</p> <pre><code>CREATE OR REPLACE FUNCTION DevolverCodproductoMascaro (p_dni CLIENTES.DNI_CLIENTE%TYPE)\nRETURN CLIENTES.ProductoMasCaroComprado%TYPE\nIS\n    v_codproducto CLIENTES.ProductoMasCaroComprado%TYPE;\nBEGIN\n    SELECT ProductoMasCaroComprado INTO v_codproducto\n    FROM CLIENTES\n    WHERE DNI_CLIENTE = p_dni;\n    return v_codproducto;\nEND;\n/\n</code></pre> <pre><code>CREATE OR REPLACE FUNCTION DevolverPrecio(p_codprodcuto PRODUCTOS.CODPRODUCTO%TYPE)\nRETURN PRODUCTOS.PrecioUnitario%type\nIS\n    v_precio NUMBER;\nBEGIN\n    SELECT PrecioUnitario INTO v_precio \n    FROM PRODUCTOS \n    WHERE CODPRODUCTO = p_codprodcuto;\n    return v_precio;\nEND;\n/\n</code></pre> <p>COMPROBACI\u00d3N</p> <p></p> <p>Realiza los m\u00f3dulos de programaci\u00f3n necesarios para asegurar que no se venden m\u00e1s de cinco productos de un mismo tipo en un mismo mes natural.</p> <p>Paquete para almacenar una tabla en memoria</p> <pre><code>CREATE OR REPLACE PACKAGE Nomasde5 AS\n    TYPE tRegistroVentas IS RECORD (\n        Tipo PRODUCTOS.Tipo%TYPE,\n        Num NUMBER               \n    );\n\n    TYPE tTablaVentas IS TABLE OF tRegistroVentas\n    INDEX BY BINARY_INTEGER;\n\n    vTablaVentas tTablaVentas;\nEND Nomasde5;\n/\n</code></pre> <p>Rellenar la tabla del paquete</p> <pre><code>CREATE OR REPLACE TRIGGER RellenarTablaVentas\nBEFORE INSERT OR UPDATE ON VENTAS\nFOR EACH ROW\nDECLARE\n    CURSOR c_NumVentas IS\n        SELECT P.Tipo, COUNT(*) AS NumVentas\n        FROM PRODUCTOS P, VENTAS V\n        WHERE P.CODPRODUCTO = V.CODPRODUCTO\n        AND TO_CHAR(V.FechaVenta, 'MM') = TO_CHAR(:new.FechaVenta, 'MM')\n        AND TO_CHAR(V.FechaVenta, 'YYYY') = TO_CHAR(:new.FechaVenta, 'YYYY')\n        GROUP BY P.Tipo;\n\n    Indice NUMBER := 1;\nBEGIN\n    Nomasde5.vTablaVentas.DELETE;\n\n    FOR v_Cur IN c_NumVentas LOOP\n        Nomasde5.vTablaVentas(Indice).Tipo := v_Cur.Tipo;\n        Nomasde5.vTablaVentas(Indice).Num := v_Cur.NumVentas;\n        Indice := Indice + 1;\n    END LOOP;\nEND;\n/\n</code></pre> <p>Trigger que comprueba la tabla</p> <pre><code>CREATE OR REPLACE TRIGGER ComprobarVentas\nBEFORE INSERT OR UPDATE ON VENTAS\nFOR EACH ROW\nDECLARE\n    v_TipoProducto PRODUCTOS.Tipo%TYPE; \n    v_NumVentas NUMBER; \nBEGIN\n    v_TipoProducto := DevolverTipo(:NEW.CodProducto);\n    v_NumVentas := ObtenerNumVentas(v_TipoProducto);\n    IF v_NumVentas &gt;= 5 THEN\n        RAISE_APPLICATION_ERROR(-20001, 'No puede haber mas de 5 ventas del mismo tipo en el mismo mes.');\n    END IF;\n    ActualizarVentas(v_TipoProducto);\nEND;\n/\n</code></pre> <p>Funci\u00f3n para devolver el tipo del producto</p> <pre><code>CREATE OR REPLACE FUNCTION DevolverTipo (p_codproducto PRODUCTOS.CODPRODUCTO%TYPE)\nRETURN PRODUCTOS.TIPO%TYPE \nIS\n    v_TipoProducto PRODUCTOS.TIPO%TYPE;\nBEGIN\n    SELECT TIPO INTO v_TipoProducto\n    FROM PRODUCTOS\n    WHERE CODPRODUCTO = p_codproducto;\n\n    RETURN v_TipoProducto;\nEND;\n/\n</code></pre> <p>Funci\u00f3n para obtener el n.\u00ba de ventas</p> <pre><code>CREATE OR REPLACE FUNCTION ObtenerNumVentas(v_TipoProducto PRODUCTOS.Tipo%TYPE) \nRETURN NUMBER IS\n    v_NumVentas NUMBER := 0;\n    v_Encontrado BOOLEAN := FALSE;\nBEGIN\n    FOR i IN Nomasde5.vTablaVentas.FIRST .. Nomasde5.vTablaVentas.LAST LOOP\n        IF Nomasde5.vTablaVentas(i).Tipo = v_TipoProducto THEN\n            v_NumVentas := Nomasde5.vTablaVentas(i).Num;\n            v_Encontrado := TRUE;\n        END IF;\n    END LOOP;\n\n    IF NOT v_Encontrado THEN\n        Nomasde5.vTablaVentas(Nomasde5.vTablaVentas.COUNT + 1).Tipo := v_TipoProducto;\n        Nomasde5.vTablaVentas(Nomasde5.vTablaVentas.COUNT).Num := 0;\n    END IF;\n\n    RETURN v_NumVentas;\nEND;\n/\n</code></pre> <p>Procedimiento para actualizar los datos del paquete</p> <pre><code>CREATE OR REPLACE PROCEDURE ActualizarVentas(v_TipoProducto PRODUCTOS.Tipo%TYPE) IS\n    i NUMBER := Nomasde5.vTablaVentas.FIRST;\nBEGIN\n    WHILE i IS NOT NULL AND i &lt;= Nomasde5.vTablaVentas.LAST LOOP\n        IF Nomasde5.vTablaVentas(i).Tipo = v_TipoProducto THEN\n            Nomasde5.vTablaVentas(i).Num := Nomasde5.vTablaVentas(i).Num + 1;\n            RETURN;\n        END IF;\n        i := Nomasde5.vTablaVentas.NEXT(i);\n    END LOOP;\n    IF i IS NULL THEN\n        Nomasde5.vTablaVentas(Nomasde5.vTablaVentas.COUNT + 1).Tipo := v_TipoProducto;\n        Nomasde5.vTablaVentas(Nomasde5.vTablaVentas.COUNT).Num := 1; \n    END IF;\nEND;\n/\n</code></pre> <p>COMPROBACI\u00d3N</p> <p></p>"},{"location":"BBDD/sql-plsql/#postgres","title":"POSTGRES","text":"<p>Crea las siguientes tablas en Postgres y en ORACLE, con las restricciones correspondientes</p> <p>TABLA PRODUCTOS</p> <pre><code>CREATE TABLE Productos(\n    CodProducto NUMERIC,\n    Nombre VARCHAR (20),\n    Tipo VARCHAR(15),\n    PrecioUnitario NUMERIC,\n    CONSTRAINT PK_productos PRIMARY KEY(codproducto),\n    CONSTRAINT Chk_Tipo CHECK(Tipo IN ('Menaje', 'Informatica', 'Telefonia')),\n    CONSTRAINT Chk_Precio CHECK(PrecioUnitario BETWEEN 0 AND 5000)\n);\n</code></pre> <p>TABLA CLIENTES</p> <pre><code>CREATE TABLE Clientes(\n    DNI_Cliente VARCHAR(10),\n    Nombre VARCHAR(20),\n    FechaAlta DATE,\n    Pais VARCHAR(20),\n    CONSTRAINT PK_clientes PRIMARY KEY (DNI_Cliente),\n    CONSTRAINT Chk_FechaAlta CHECK (FechaAlta &gt; TO_DATE ('31-12-2019', 'DD-MM-YYYY')),\n    CONSTRAINT Chk_DNI CHECK(DNI_CLIENTE ~ '^[0-9]{8}-[A-Z]$'),\n    CONSTRAINT Chk_Pais CHECK (Pais IN ('Espa\u00f1a', 'Italia', 'Francia'))    \n);\n</code></pre> <p>TABLA VENTAS</p> <pre><code>CREATE TABLE Ventas(\n    CodProducto NUMERIC,\n    DNI_Cliente VARCHAR(10),\n    FechaVenta DATE,\n    NumUnidades NUMERIC,\n    CONSTRAINT PK_Ventas PRIMARY KEY (CodProducto, DNI_Cliente, FechaVenta),\n    CONSTRAINT FK_Cod FOREIGN KEY (CodProducto) REFERENCES Productos(CodProducto),\n    CONSTRAINT FK_Dni FOREIGN KEY (DNI_Cliente) REFERENCES Clientes(DNI_Cliente)\n);\n</code></pre>"},{"location":"BBDD/sql-plsql/#sql","title":"SQL","text":"<p>Realizar una consulta que muestre el nombre del \u00faltimo producto que compr\u00f3 cada cliente que ha realizado alguna compra en los \u00faltimos diez d\u00edas.</p> <pre><code>SELECT P.Nombre, C.Nombre\nFROM Productos P, Clientes C\nWHERE (P.CodProducto, C.DNI_Cliente) IN (SELECT V.codproducto, V.DNI_Cliente\n                                         FROM VENTAS V\n                                         WHERE FechaVenta = (SELECT MAX(V2.FechaVenta)\n                                                             FROM VENTAS V2\n                                                             WHERE V2.DNI_CLIENTE =V.DNI_CLIENTE\n                                                             AND V2.FechaVenta &gt;= CURRENT_DATE - INTERVAL '10 days'));\n\nnombre   | nombre\n---------+-------\nTeclado  | Raul\nRaton    | Sophie\n(2 filas)\n</code></pre> <p>Realizar una consulta que muestre el importe total de las compras de productos de Tipo \u2018Menaje\u2019 para cada uno de los clientes junto con el nombre de dicho cliente incluyendo aquellos que no han comprado productos de ese tipo</p> <pre><code>SELECT C.Nombre, COALESCE(SUM(P.PrecioUnitario * V.NumUnidades), 0) AS IMP_TOTAL\nFROM CLIENTES C\nLEFT JOIN VENTAS V ON C.DNI_CLIENTE = V.DNI_CLIENTE\nLEFT JOIN PRODUCTOS P ON P.CodProducto = V.CodProducto\nAND P.Tipo = 'Menaje'\nGROUP BY C.Nombre;\n\nnombre    | imp_total\n----------+----------\nKiki      | 0\nRaul      | 150\nLucia     | 10\nAlejandro | 60\nAlessia   | 0\nPierre    | 0\nSophie    | 90\nJacques   | 0\nPinedi    | 0\n(9 filas)\n</code></pre> <p>Realizar una vista llamada \u2018Productos de Telefon\u00eda\u2019 con los siguientes datos: C\u00f3digo del Producto, Nombre del Producto, Importe Total de las Ventas del Producto, Fecha de la \u00faltima venta del producto y pa\u00eds del primer cliente que lo compr\u00f3. En la vista solo deben aparecer los art\u00edculos de tipo \u2018Telefon\u00eda\u2019</p> <p>PRIMERA VISTA</p> <pre><code>CREATE OR REPLACE VIEW PrimerPais AS \nSELECT Pais, V.CODPRODUCTO\nFROM Clientes C, VENTAS V \nWHERE C.DNI_CLIENTE = V.DNI_CLIENTE\nAND V.CODPRODUCTO IN (SELECT CODPRODUCTO\n                      FROM PRODUCTOS p\n                      WHERE Tipo = 'Telefonia') \nAND FechaVenta = (SELECT MIN(FechaVenta)\n                  FROM VENTAS V2\n                  WHERE V2.CODPRODUCTO = V.CODPRODUCTO);\n</code></pre> <p>VISTA PRINCIPAL</p> <pre><code>CREATE OR REPLACE VIEW Productos_de_telefonia AS\nSELECT P.CodProducto, P.Nombre, SUM(P.PrecioUnitario * V.NumUnidades) as IMP_TOTAL, MAX(V.FechaVenta) AS Ultima_Venta, PP.Pais AS PrimerPaisProducto\nFROM PRODUCTOS P, VENTAS V, PrimerPais PP \nWHERE P.CODPRODUCTO = V.CODPRODUCTO\nAND PP.CODPRODUCTO = V.CODPRODUCTO\nAND P.Tipo = 'Telefonia'\nGROUP BY P.CODPRODUCTO, P.NOMBRE, PP.Pais;\n</code></pre> <pre><code>practica=&gt; SELECT * FROM productos_de_telefonia;\n codproducto  |    nombre     | imp_total | ultima_venta | primerpaisproducto\n--------------+---------------+-----------+--------------+-----------------\n            7 | Redmi Note 10 |      3600 | 2024-11-11   | Francia\n            8 | Tablet        |       750 | 2023-04-05   | Francia\n            9 | Smartwatch    |       300 | 2022-08-25   | Espa\u00f1a\n</code></pre> <p>Muestra los distintos tipos de productos junto al nombre del cliente que ha comprado m\u00e1s unidades de ese tipo de producto en los \u00faltimos diez a\u00f1os.</p> <pre><code>CREATE OR REPLACE VIEW VentasPorClienteYTipo AS\nSELECT P.Tipo, V.DNI_Cliente, COUNT(*) AS cuenta_ventas\nFROM PRODUCTOS P, VENTAS V\nWHERE P.CodProducto = V.CodProducto\n  AND V.FechaVenta &gt;= CURRENT_DATE - INTERVAL '10 year'\nGROUP BY P.Tipo, V.DNI_Cliente;\n</code></pre> <pre><code>CREATE OR REPLACE VIEW MaxVentasPorTipo AS\nSELECT Tipo, MAX(cuenta_ventas) AS max_ventas\nFROM VentasPorClienteYTipo\nGROUP BY Tipo;\n</code></pre> <pre><code>SELECT P.Tipo, C.Nombre\nFROM PRODUCTOS P, VENTAS V, CLIENTES C, MaxVentasPorTipo M\nWHERE P.CodProducto = V.CodProducto\n  AND V.DNI_Cliente = C.DNI_Cliente\n  AND P.Tipo = M.Tipo\n  AND V.FechaVenta &gt;= CURRENT_DATE - INTERVAL '10 year'\nGROUP BY P.Tipo, C.Nombre, M.max_ventas\nHAVING COUNT(*) = M.max_ventas\nORDER BY P.Tipo;\n\n    tipo     |  nombre\n-------------+----------\n Informatica | Alejandro\n Menaje      | Sophie\n Telefonia   | Lucia\n Telefonia   | Sophie\n(4 filas)    \n</code></pre> <p>Realiza una consulta con operadores de conjuntos que nos diga qu\u00e9 art\u00edculos se han vendido tanto en enero como en febrero como en marzo.</p> <pre><code>SELECT P.Nombre \nFROM PRODUCTOS P \nWHERE CODPRODUCTO IN (SELECT CODPRODUCTO\n                      FROM VENTAS\n                      WHERE TO_CHAR(FechaVenta, 'MM') = '01')\nINTERSECT\nSELECT P.Nombre \nFROM PRODUCTOS P \nWHERE CODPRODUCTO IN (SELECT CODPRODUCTO\n                      FROM VENTAS\n                      WHERE TO_CHAR(FechaVenta, 'MM') = '02')\nINTERSECT\nSELECT P.Nombre \nFROM PRODUCTOS P \nWHERE CODPRODUCTO IN (SELECT CODPRODUCTO\n                      FROM VENTAS\n                      WHERE TO_CHAR(FechaVenta, 'MM') = '03')\n\n nombre \n----------\n Ordenador\n Taza\n</code></pre>"},{"location":"BBDD/sql-plsql/#plsql","title":"PL/SQL","text":"<p>Realizar un procedimiento que reciba un tipo de producto, un mes y un a\u00f1o y muestre un listado de todas las compras que se han realizado de productos de dicho tipo en dicho mes agrupadas por pa\u00eds y cliente. Si no existe ning\u00fan art\u00edculo de ese tipo debe generarse una excepci\u00f3n, as\u00ed como si no existen ventas de art\u00edculos de ese tipo. Si desde un pa\u00eds no se ha hecho ninguna compra debe aparecer un mensaje indic\u00e1ndolo.</p> <p>PROCEDIMIENTO PRINCIPAL</p> <pre><code>    CREATE OR REPLACE PROCEDURE principal (\n        p_tipo VARCHAR,\n        p_mes VARCHAR,\n        p_anio VARCHAR\n    ) LANGUAGE plpgsql AS $$ \n    BEGIN\n        CALL excepciones(p_tipo, p_mes, p_anio);\n        CALL encabezado(p_tipo, p_mes, p_anio);\n        CALL informe(p_tipo, p_mes, p_anio);\n    END;\n    $$;\n</code></pre> <p>EXCEPCI\u00d3N PRINCIPAL</p> <pre><code>    CREATE OR REPLACE PROCEDURE excepciones (\n        p_tipo VARCHAR,\n        p_mes VARCHAR,\n        p_anio VARCHAR\n    ) LANGUAGE plpgsql\n    AS $$\n    DECLARE\n        v_cont NUMERIC;\n    BEGIN\n        v_cont := excecpcion_tipo(p_tipo);\n        IF v_cont = 0 THEN\n            RAISE EXCEPTION 'No existe ning\u00fan articulo del tipo %', p_tipo;\n        ELSE\n            v_cont := excepcion_ventas(p_tipo, p_mes, p_anio);\n            IF v_cont = 0 THEN\n                RAISE EXCEPTION 'No existen ventas del tipo % en la fecha indicada', p_tipo;\n            END IF;\n        END IF;\n    END;\n    $$;\n</code></pre> <p>Excepci\u00f3n no existen articulos del tipo introducido</p> <pre><code>    CREATE OR REPLACE FUNCTION excecpcion_tipo (p_tipo VARCHAR)\n    RETURNS NUMERIC LANGUAGE plpgsql \n    AS $$ \n    DECLARE\n        v_cont NUMERIC;\n    BEGIN\n        SELECT COUNT(*) INTO v_cont\n        FROM PRODUCTOS\n        WHERE Tipo = p_tipo;\n        return v_cont;  \n    END;\n    $$;\n</code></pre> <p>Excepci\u00f3n sin ventas del tipo</p> <pre><code>    CREATE OR REPLACE FUNCTION excepcion_ventas (\n        p_tipo VARCHAR,\n        p_mes VARCHAR,\n        p_anio VARCHAR\n        )\n    RETURNS NUMERIC LANGUAGE plpgsql\n    AS $$\n    DECLARE\n        v_cont NUMERIC;\n    BEGIN\n        SELECT COUNT (*) INTO v_cont\n        FROM VENTAS\n        WHERE CODPRODUCTO IN (SELECT CODPRODUCTO\n                            FROM PRODUCTOS \n                            WHERE Tipo = p_tipo)\n        AND TO_CHAR(FechaVenta, 'MM') = p_mes\n        AND TO_CHAR(FechaVenta, 'YYYY')=  p_anio;\n        return v_cont;\n    END;\n    $$;\n</code></pre> <p>Excecpci\u00f3n Pais</p> <pre><code>    CREATE OR REPLACE PROCEDURE ExcepcionPais (\n        p_tipo VARCHAR,\n        p_mes VARCHAR,\n        p_anio VARCHAR\n        )\n    LANGUAGE plpgsql AS $$\n    DECLARE\n        c_paises CURSOR FOR\n            SELECT DISTINCT Pais FROM CLIENTES \n            WHERE Pais NOT IN (SELECT Pais FROM CLientes C\n                                WHERE C.DNI_CLIENTE IN (SELECT DNI_CLIENTE\n                                                        FROM VENTAS\n                                                        WHERE CODPRODUCTO IN (SELECT CODPRODUCTO\n                                                                            FROM Productos\n                                                                            WHERE Tipo = p_tipo)\n                                                        AND TO_CHAR(FECHAVENTA, 'MM') = p_mes\n                                                        AND TO_CHAR(FechaVenta, 'YYYY')= p_anio));\n    BEGIN\n        FOR v_cur IN c_paises LOOP\n            RAISE NOTICE 'Desde % no se ha hecho ninguna compra del tipo %', v_cur.Pais, p_tipo;\n        END LOOP;\n    END;\n    $$;\n</code></pre> <p>COMPROBACI\u00d3N EXCEPCIONES</p> <p></p> <p></p> <p>Encabezado</p> <pre><code>    CREATE OR REPLACE PROCEDURE encabezado(\n        p_tipo VARCHAR, \n        p_mes VARCHAR, \n        p_anio VARCHAR\n    )\n    LANGUAGE plpgsql\n    AS $$\n    BEGIN\n        RAISE NOTICE '_____________________________________________________________';\n        RAISE NOTICE E'\\tCompras de art\u00edculos de Tipo: %', p_tipo;\n        RAISE NOTICE E'\\t\\tMes: %  A\u00f1o: %', p_mes, p_anio;\n        RAISE NOTICE '_____________________________________________________________';\n\n    END;\n    $$;\n</code></pre> <p>Informe</p> <pre><code>    CREATE OR REPLACE PROCEDURE Informe(\n        p_tipo VARCHAR,\n        p_mes VARCHAR,\n        p_anio VARCHAR\n    ) LANGUAGE plpgsql\n    AS $$\n    DECLARE\n        c_paises CURSOR FOR\n            SELECT DISTINCT Pais \n            FROM CLIENTES\n            WHERE DNI_CLIENTE IN (SELECT DNI_CLIENTE\n                                FROM VENTAS\n                                WHERE TO_CHAR(FechaVenta, 'MM') = p_mes\n                                AND TO_CHAR(FechaVenta, 'YYYY') = p_anio\n                                AND CODPRODUCTO IN (SELECT CODPRODUCTO\n                                                    FROM PRODUCTOS\n                                                    WHERE Tipo = p_tipo));\n        v_total_compras_global NUMERIC := 0;\n        v_compras_pais NUMERIC := 0;\n    BEGIN\n        FOR v_cur IN c_paises LOOP\n            RAISE NOTICE 'Pais: %', v_Cur.Pais;\n            CALL Informe_Por_Pais(v_cur.Pais, p_tipo, p_mes, p_anio, v_compras_pais);\n            v_total_compras_global := v_total_compras_global + v_compras_pais;\n        END LOOP;\n        CALL ExcepcionPais(p_tipo, p_mes, p_anio);\n        RAISE NOTICE '_____________________________________________________________';\n        RAISE NOTICE 'Total Compras del Tipo %: %', p_tipo, v_total_compras_global;\n    END;\n    $$;\n</code></pre> <p>Informe Por Pa\u00eds</p> <pre><code>    CREATE OR REPLACE PROCEDURE Informe_Por_Pais(\n        p_pais VARCHAR,\n        p_tipo VARCHAR,\n        p_mes VARCHAR,\n        p_anio VARCHAR,\n        OUT p_compras_global NUMERIC\n    ) LANGUAGE plpgsql AS $$\n    DECLARE\n        c_informe CURSOR FOR\n            SELECT DNI_CLIENTE\n            FROM CLIENTES\n            WHERE DNI_CLIENTE IN (SELECT DNI_CLIENTE\n                                FROM VENTAS\n                                WHERE TO_CHAR(FechaVenta, 'MM') = p_mes\n                                AND TO_CHAR(FechaVenta, 'YYYY') = p_anio\n                                AND CODPRODUCTO IN (SELECT CODPRODUCTO\n                                                    FROM PRODUCTOS\n                                                    WHERE Tipo = p_tipo)\n            AND Pais = p_pais);\n        v_nombre VARCHAR;\n        v_compras_cliente NUMERIC := 0;\n        v_compras_pais NUMERIC := 0;\n    BEGIN\n        FOR v_cur IN c_informe LOOP\n            v_nombre := Devolver_Nombre_Cliente(v_cur.DNI_CLIENTE);\n            RAISE NOTICE E'\\tCliente: %', v_nombre;\n            CALL Informe_Por_Cliente(v_cur.DNI_CLIENTE, p_tipo, p_mes, p_anio, v_nombre, v_compras_cliente);\n            v_compras_pais := v_compras_pais + v_compras_cliente;\n        END LOOP;\n\n        RAISE NOTICE 'Total Compras en %: %', p_pais, v_compras_pais;\n        RAISE NOTICE '_____________________________________________________________';\n        p_compras_global := v_compras_pais;\n    END;\n    $$;\n</code></pre> <p>Funci\u00f3n Devolver_Nombre_Cliente</p> <pre><code>    CREATE OR REPLACE FUNCTION Devolver_Nombre_Cliente(p_dni VARCHAR)\n    RETURNS VARCHAR LANGUAGE plpgsql AS $$\n    DECLARE\n        v_nombre VARCHAR;\n    BEGIN\n        SELECT Nombre INTO v_nombre\n        FROM CLIENTES\n        WHERE DNI_CLIENTE = p_dni;\n        RETURN v_nombre;\n    END;\n    $$;\n</code></pre> <p>Informe_Por_Cliente</p> <pre><code>    CREATE OR REPLACE PROCEDURE Informe_Por_Cliente(\n        p_dni VARCHAR,\n        p_tipo VARCHAR,\n        p_mes VARCHAR,\n        p_anio VARCHAR,\n        p_cliente VARCHAR,\n        OUT p_compras_cliente NUMERIC\n    ) LANGUAGE plpgsql AS $$\n    DECLARE\n        c_clientes CURSOR FOR\n            SELECT P.CODPRODUCTO AS codproducto, FechaVenta, (V.NumUnidades * P.PrecioUnitario) AS importecompra\n            FROM VENTAS V, PRODUCTOS P \n            WHERE P.CODPRODUCTO = V.CODPRODUCTO\n            AND TO_CHAR(FechaVenta, 'MM') = p_mes\n            AND TO_CHAR(FechaVenta, 'YYYY') = p_anio\n            AND Tipo = p_tipo\n            AND DNI_CLIENTE = p_dni;\n        v_importe_total_cliente NUMERIC := 0;\n        v_compras_cliente NUMERIC := 0;\n    BEGIN\n        RAISE NOTICE E'\\t\\tCodProducto \\tFechaVenta \\tImporteCompra';\n        FOR v_cur IN c_clientes LOOP\n            RAISE NOTICE E'\\t\\t\\t% \\t% \\t%', v_cur.codproducto, v_cur.FechaVenta, v_cur.importecompra;\n            v_importe_total_cliente := v_importe_total_cliente + v_cur.importecompra;\n            v_compras_cliente := v_compras_cliente + 1;\n        END LOOP;\n        RAISE NOTICE E'Importe total del Cliente %: %', p_cliente, v_importe_total_cliente;\n        RAISE NOTICE '- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -';\n        p_compras_cliente := v_compras_cliente; \n    END;\n    $$;\n</code></pre> <p>Comprobaci\u00f3n</p> <p></p> <p></p> <p></p> <p></p> <p>Realizar un trigger que cuando se inserte una venta mantenga correctamente actualizada la columna ProductoMasCaroComprado (que previamente has de crear y rellenar mediante un procedimiento) en la tabla Clientes.</p> <p>A\u00f1adir columna en Clientes</p> <pre><code>ALTER TABLE CLIENTES\nADD COLUMN ProductoMasCaroComprado NUMERIC;\n</code></pre> <p>Rellenar Columna Producto M\u00e1s Caro</p> <pre><code>    CREATE OR REPLACE PROCEDURE Rellenar_Columna_Producto_clientes()\n    LANGUAGE plpgsql AS $$ \n    DECLARE\n        c_productos CURSOR FOR\n            SELECT C.DNI_CLIENTE as cliente, V.CODPRODUCTO as codigo \n            FROM CLIENTES C, VENTAS V, PRODUCTOS P  \n            WHERE C.DNI_CLIENTE = V.DNI_CLIENTE\n            AND V.CODPRODUCTO = P.CODPRODUCTO\n            AND P.PRECIOUNITARIO IN (SELECT MAX(PRECIOUNITARIO) \n                                    FROM PRODUCTOS P2, VENTAS V2 \n                                    WHERE V2.CODPRODUCTO = P2.CODPRODUCTO\n                                    AND V2.DNI_CLIENTE = V.DNI_CLIENTE  \n                                    )\n            GROUP BY cliente, codigo;\n    BEGIN\n        for v_cur IN c_productos LOOP \n            UPDATE CLIENTES \n            SET ProductoMasCaroComprado = v_cur.codigo\n            WHERE DNI_CLIENTE = v_cur.cliente;\n        END LOOP;\n    END;\n    $$;\n</code></pre> <p>Trigger</p> <pre><code>    CREATE TRIGGER Actualizar_producto_mas_caro_clientes\n    AFTER INSERT OR UPDATE ON VENTAS\n    FOR EACH ROW\n    EXECUTE FUNCTION Actualizar_producto_mas_caro_clientes();\n</code></pre> <p>Funciones</p> <pre><code>    CREATE OR REPLACE FUNCTION Actualizar_producto_mas_caro_clientes()\n    RETURNS TRIGGER LANGUAGE plpgsql AS $$ \n    DECLARE \n        v_precio_antiguo NUMERIC;\n        v_precio_nuevo  NUMERIC;   \n        v_codproducto_mascaro_actual NUMERIC;\n    BEGIN\n        v_codproducto_mascaro_actual:=Devolver_CodProducto(NEW.DNI_CLIENTE);\n        v_precio_antiguo := DevolverPrecioProducto(v_codproducto_mascaro_actual);\n        v_precio_nuevo := DevolverPrecioProducto(NEW.CodProducto);\n        IF v_precio_nuevo &gt; v_precio_antiguo THEN\n            UPDATE CLIENTES\n            SET ProductoMasCaroComprado = NEW.CodProducto\n            WHERE DNI_CLIENTE = NEW.DNI_CLIENTE;\n            RETURN NULL;\n        END IF;\n        RETURN NULL;\n    END;\n    $$;\n</code></pre> <p>Funci\u00f3n DevolverCodProducto</p> <pre><code>    CREATE OR REPLACE FUNCTION Devolver_CodProducto (p_dni VARCHAR)\n    RETURNS NUMERIC LANGUAGE plpgsql AS $$\n    DECLARE\n        v_codproducto NUMERIC;\n    BEGIN\n        SELECT ProductoMasCaroComprado INTO v_codproducto\n        FROM CLIENTES \n        WHERE DNI_CLIENTE = p_dni;\n        return v_codproducto;\n    END;\n    $$;\n</code></pre> <p>Funci\u00f3n DevolverPrecioProducto</p> <pre><code>    CREATE OR REPLACE FUNCTION DevolverPrecioProducto (p_codproducto NUMERIC)\n    RETURNS NUMERIC LANGUAGE plpgsql AS $$\n    DECLARE\n        v_precio NUMERIC;\n    BEGIN\n        SELECT PrecioUnitario INTO v_precio\n        FROM PRODUCTOS \n        WHERE CODPRODUCTO = p_codproducto;\n        RETURN v_precio;\n    END;\n    $$;\n</code></pre> <p>Comprobaci\u00f3n Trigger</p> <p>Para la comprobaci\u00f3n inserto dos datos, una debe de actualizar la columna de Pinedi y otra es del cliente Kiki, que el producto introducido nuevo tiene el mismo valor que el que ya tiene como m\u00e1s caro, por lo que no debe actualizar.</p> <p></p>"}]}